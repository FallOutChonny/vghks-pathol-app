{"version":3,"sources":["components/withViewport.js","containers/image-viewer-tutorial/map.js","containers/image-viewer-tutorial/image-viewer-tutorial.js"],"names":["withViewport","ComposedComponent","state","viewport","envStore","canUseDOM","width","window","innerWidth","height","innerHeight","handleResize","setState","addEventListener","this","removeEventListener","props","React","PureComponent","MapComponent","mapBounds","whenMapReady","target","mapUrl","center","zoomControl","zoom","minZoom","maxZoom","scrollWheelZoom","doubleClickZoom","Fragment","MapContainer","id","crs","CRS","Simple","bounds","zoomDelta","zoomSnap","attributionControl","whenReady","ImageOverlay","url","children","defaultProps","drawOptions","shapeOptions","color","opacity","fillOpacity","ImageViewerTutorial","mapCenter","score","isVisible","map","setMaxBounds","getBounds","drawnItems","L","featureGroup","addTo","addControl","Control","Draw","position","edit","poly","allowIntersection","draw","marker","circlemarker","polyline","polygon","rectangle","circle","on","evt","console","log","Event","CREATED","event","layer","options","Math","floor","random","addLayer","PageWrapper","className","style","gutter","span","publicUrl","FeatureGroup","Circle","lat","lng","radius","activeKey","expandIcon","Panel","key","header","Component","styled","Page"],"mappings":"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","file":"static/js/19.ea04548c.chunk.js","sourcesContent":["// withViewport.js\nimport React from 'react'\nimport { envStore } from '@/constants/env'\n\nfunction withViewport(ComposedComponent) {\n  return class WithViewport extends React.PureComponent {\n    state = {\n      viewport: envStore.canUseDOM\n        ? { width: window.innerWidth, height: window.innerHeight }\n        : { width: 1366, height: 768 }, // Default size for server-side rendering\n    }\n\n    componentDidMount() {\n      window.addEventListener('resize', this.handleResize)\n      window.addEventListener('orientationchange', this.handleResize)\n    }\n\n    componentWillUnmount() {\n      window.removeEventListener('resize', this.handleResize)\n      window.removeEventListener('orientationchange', this.handleResize)\n    }\n\n    handleResize = () => {\n      let viewport = { width: window.innerWidth, height: window.innerHeight }\n      if (\n        this.state.viewport.width !== viewport.width ||\n        this.state.viewport.height !== viewport.height\n      ) {\n        this.setState({ viewport })\n      }\n    }\n\n    render() {\n      return (\n        <ComposedComponent {...this.props} viewport={this.state.viewport} />\n      )\n    }\n  }\n}\n\nexport default withViewport\n","import React from 'react'\nimport { MapContainer, ImageOverlay } from 'react-leaflet'\n// import { EventedProps } from '@react-leaflet/core'\nimport { CRS /* Map, MapOptions, LeafletEventHandlerFn */ } from 'leaflet'\n\n// interface Props extends MapOptions, EventedProps {\n//   zoomControl: boolean\n//   attributionControl: boolean\n//   doubleClickZoom: boolean\n//   scrollWheelZoom: boolean\n//   maxZoom: number\n//   minZoom: number\n//   mapUrl: string\n//   onClick?: (e: LeafletEventHandlerFn) => void\n//   whenMapReady?: (map: Map) => void\n// }\n\n// type State = {\n//   mapBounds: [[number, number], [number, number]]\n// }\n\nclass MapComponent extends React.PureComponent {\n  static defaultProps = {\n    zoomControl: true,\n    attributionControl: false,\n    doubleClickZoom: false,\n    scrollWheelZoom: true,\n    maxZoom: 1.5,\n    minZoom: -1.0,\n    crs: CRS.Simple,\n    mapUrl: '',\n  }\n\n  state = {\n    mapBounds: [\n      [0, 0],\n      [800, 1000],\n    ],\n  }\n\n  whenMapReady = ({ target }) => {\n    if (this.props.whenMapReady) {\n      this.props.whenMapReady(target)\n    }\n  }\n\n  // handleClick = e => {\n  //   console.log(e)\n  //   if (this.props.onClick) {\n  //     this.props.onClick(e)\n  //   }\n  // }\n\n  // handleDrop = item => {\n  //   if (this.props.onDrop) {\n  //     this.props.onDrop(item)\n  //   }\n  // }\n\n  // handleZoomStart = e => {\n  //   if (length(document.querySelectorAll('.react-contexify')) > 0) {\n  //     contextMenu.hideAll()\n  //   }\n  // }\n\n  render() {\n    const {\n      props: {\n        mapUrl,\n        center,\n        zoomControl,\n        zoom,\n        minZoom,\n        maxZoom,\n        scrollWheelZoom,\n        doubleClickZoom,\n        // connectDropTarget,\n      },\n      state: { mapBounds },\n    } = this\n\n    return (\n      <React.Fragment>\n        <MapContainer\n          id=\"map\"\n          crs={CRS.Simple}\n          bounds={mapBounds}\n          center={center}\n          zoom={zoom}\n          maxZoom={maxZoom}\n          minZoom={minZoom}\n          zoomDelta={0.5}\n          zoomSnap={0.5}\n          zoomControl={zoomControl}\n          // onZoomStart={this.handleZoomStart}\n          scrollWheelZoom={scrollWheelZoom}\n          doubleClickZoom={doubleClickZoom}\n          attributionControl={false}\n          // onClick={this.handleClick}\n          whenReady={this.whenMapReady}>\n          <ImageOverlay url={mapUrl} bounds={mapBounds} />\n          {this.props.children}\n        </MapContainer>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default MapComponent\n","import React from 'react'\nimport { Row, Col } from 'antd'\nimport { Circle, FeatureGroup } from 'react-leaflet'\nimport L from 'leaflet'\nimport styled from 'styled-components'\nimport { Page } from '@/components/layout'\nimport Collapse from '@/components/collapse'\nimport withViewport from '@/components/withViewport'\nimport { envStore } from '@/constants/env'\nimport Map from './map'\nimport 'leaflet-draw/dist/leaflet.draw'\n\nconst drawOptions = {\n  shapeOptions: {\n    color: '#00ff00',\n    opacity: 1,\n    fillOpacity: 0,\n  },\n}\n\nclass ImageViewerTutorial extends React.Component {\n  state = {\n    mapCenter: null,\n    score: 0,\n    isVisible: false,\n  }\n\n  constructor(props) {\n    super(props)\n    this.map = null\n  }\n\n  whenMapReady = map => {\n    this.map = map\n\n    map.setMaxBounds(map.getBounds())\n\n    let drawnItems = L.featureGroup().addTo(map)\n\n    map.addControl(\n      new L.Control.Draw({\n        position: 'topright',\n        edit: {\n          featureGroup: drawnItems,\n          poly: {\n            allowIntersection: false,\n          },\n        },\n        draw: {\n          marker: false,\n          circlemarker: false,\n          polyline: true,\n          polygon: drawOptions,\n          rectangle: drawOptions,\n          circle: drawOptions,\n        },\n      })\n    )\n\n    map.on('click', evt => {\n      console.log(evt)\n    })\n\n    map.on(L.Draw.Event.CREATED, event => {\n      let layer = event.layer\n\n      layer.options.color = '#00FF00'\n      layer.options.opacity = 1\n      layer.options.fillOpacity = 0\n\n      this.setState({ score: Math.floor(Math.random() * 100), isVisible: true })\n\n      drawnItems.addLayer(layer)\n    })\n  }\n\n  render() {\n    const { mapCenter, score, isVisible } = this.state\n    const { viewport } = this.props\n\n    return (\n      <PageWrapper className=\"pr-10\" style={{ height: viewport.height - 204 }}>\n        <Row gutter={24}>\n          <Col span={18}>\n            <div className=\"bg-white rounded-lg shadow-2xl\">\n              <Map\n                zoomControl={false}\n                mapUrl={`${envStore.publicUrl}/images/HCC_image.png`}\n                center={mapCenter}\n                whenMapReady={this.whenMapReady}>\n                {isVisible && (\n                  <FeatureGroup>\n                    <Circle\n                      center={{ lat: 393.1513703397205, lng: 413.105532310897 }}\n                      radius={40}\n                      color=\"red\"\n                      opacity={1}\n                      fillOpacity={0}\n                    />\n                  </FeatureGroup>\n                )}\n              </Map>\n            </div>\n          </Col>\n          <Col span={6}>\n            <Collapse\n              activeKey={[1, 2]}\n              expandIcon={() => null}\n              className=\"shadow-2xl\">\n              <Collapse.Panel\n                key={1}\n                header={<div className=\"text-center\">基本資料</div>}>\n                <div className=\"border-b border-gray-600 p-3\">姓名：xxxxxx</div>\n                <div className=\"border-b border-gray-600 p-3\">性別：男</div>\n                <div className=\"border-b border-gray-600 p-3\">\n                  病理號：xxxxxxxxx\n                </div>\n                <div className=\"border-b border-gray-600 p-3\">年齡：30</div>\n                <div className=\"border-b border-gray-600 p-3\">\n                  疾病名稱：HCC\n                </div>\n              </Collapse.Panel>\n              <Collapse.Panel\n                key={2}\n                header={<div className=\"text-center\">分數計算</div>}>\n                <div className=\"border-b border-gray-600 p-3\">\n                  分數：{score}\n                </div>\n              </Collapse.Panel>\n            </Collapse>\n          </Col>\n        </Row>\n      </PageWrapper>\n    )\n  }\n}\n\nconst PageWrapper = styled(Page)`\n  .leaflet-container {\n    height: 600px;\n    width: 100%;\n    margin: 0 auto;\n    background: #000;\n    border-radius: 6px;\n  }\n`\n\nexport default withViewport(ImageViewerTutorial)\n"],"sourceRoot":""}