{"version":3,"sources":["services/pathology.tsx","components/snippet-drag-preview.js","components/snippet-drag-layer.tsx","services/shift.ts","containers/image-scheduler/item-types.ts","containers/image-scheduler/draggable-doctor-card.tsx","containers/image-scheduler/image-scheduler-calendar.tsx","containers/image-scheduler/image-scheduler.tsx"],"names":["compose","require","useDoctors","division","Divisions","PATH","variables","useSWR","data","rest","_data","map","x","id","doctorId","doctorById","forEach","s","doctorEnums","DoctorSelect","props","Option","key","value","doctor","pathOr","BodyPartSelect","uuid","name","useBodyParts","BedroomSelect","useBedrooms","AppointmentTypeSelect","useAppointmentTypes","SnippetDragPreview","React","Component","layerStyles","position","pointerEvents","zIndex","left","top","width","height","getItemStyles","initialOffset","currentOffset","display","y","transform","WebkitTransform","DragLayer","monitor","item","getItem","itemType","getItemType","getInitialSourceClientOffset","getSourceClientOffset","isDragging","element","document","elementFromPoint","canDrop","canMoveSnippet","className","style","ItemTypes","BOARD","SNIPPET","renderItem","withDragSource","DragSource","beginDrag","canDrag","connect","connectDragSource","dragSource","connectDragPreview","dragPreview","componentDidMount","getEmptyImage","this","node","_style","border","BlockPlaceHolder","styled","div","attrs","withDropTarget","DropTarget","drop","component","index","handleDoctorDrop","doctors","allPass","lt","__","length","isNil","find","propEq","connectDropTarget","dropTarget","isOver","didDrop","draggingItem","marginBottom","ImageSchedulerCalendar","onDoctorDrop","handleDoctorRemove","onDoctorRemove","itemHeight","cx","CloseOutlined","onClick","right","fontSize","cursor","MonthPicker","ImageScheduler","useTitle","useBreadcrumb","handleConfirm","useRouteLeaveConfirm","useState","moment","date","setDate","doctorList","setDoctorList","lazy","onCompleted","onError","shiftById","push","useShifts","format","period","refetch","loading","called","revalidate","options","useRequest","method","mutate","handler","values","payload","flatten","mapIndexed","idx","year_month","keys","useCreateOrUpdateShift","response","success","validating","handleSave","useHeaderContent","color","prev","list","filter","calendar","span","month","times","identity","invoker","spinning","layout","colon","Item","label","allowClear","onChange","gutter","draggable"],"mappings":"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","file":"static/js/13.8751a0d6.chunk.js","sourcesContent":["import React from 'react'\nimport { SelectProps } from 'antd/lib/select'\nimport useSwr from 'swr'\nimport { pathOr, head, forEach, map } from 'ramda'\nimport request from '@/utils/request'\nimport useSWR from '@/hooks/useSWR'\nimport Select from '@/components/select'\nimport { QueryVariables, MedicalOrder } from '@/constants/types'\nimport { uuid } from '@/utils/webHelper'\nimport { Divisions } from '@/constants/enums'\nconst { compose } = require('ramda')\n\nexport type Doctor = {\n  id: number\n  doctorId: number\n  doctor: string\n  division: Divisions\n}\n\nexport function usePathology() {\n  const { data, ...others } = useSwr(`/api/b2/getPathologyResult`, url =>\n    request(url, {\n      method: 'POST',\n      body: {\n        classification: 'pathorderview',\n        noType: 'HHISNUM',\n        no: '16685033',\n      },\n    })\n  )\n\n  return {\n    ...others,\n    data: compose(head, pathOr([], []))(data) as MedicalOrder,\n  }\n}\n\nexport function useDoctors({\n  division = Divisions.PATH,\n  ...variables\n}: QueryVariables = {}) {\n  const { data = [], ...rest } = useSWR<Doctor[]>(\n    '/api/v1/c2/getC2DoctorList/{division}',\n    {\n      variables: { division, ...variables },\n    }\n  )\n\n  const _data = data?.map(x => ({ ...x, id: x.doctorId }))\n\n  const doctorById: { [key: string]: any } = {}\n\n  forEach(s => (doctorById[s.doctorId] = s), _data)\n\n  return {\n    ...rest,\n    doctorById,\n    data: _data,\n    doctorEnums: _data,\n  }\n}\n\nexport function DoctorSelect(props: SelectProps<any>) {\n  const { data } = useDoctors()\n  return (\n    <Select {...props}>\n      {compose(\n        map((x: Doctor) => (\n          <Select.Option key={x.id} value={x.doctor}>\n            {x.doctor}\n          </Select.Option>\n        )),\n        pathOr([], [])\n      )(data)}\n    </Select>\n  )\n}\n\nexport function useBodyParts() {\n  const { data = [], ...rest } = useSWR<string[]>('/api/v1/b1/getBodyParts')\n\n  const _data = data?.map(x => ({ id: uuid(), name: x }))\n\n  return {\n    ...rest,\n    data: _data,\n  }\n}\n\nexport function BodyPartSelect(props: SelectProps<any>) {\n  const { data } = useBodyParts()\n  return (\n    <Select {...props}>\n      {data.map(x => (\n        <Select.Option key={x.id} value={x.name}>\n          {x.name}\n        </Select.Option>\n      ))}\n    </Select>\n  )\n}\n\nexport function useBedrooms() {\n  const { data = [], ...rest } = useSWR<string[]>('/api/v1/b1/getWards')\n\n  const _data = data?.map(x => ({ id: uuid(), name: x }))\n\n  return {\n    ...rest,\n    data: _data,\n  }\n}\n\nexport function BedroomSelect(props: SelectProps<any>) {\n  const { data } = useBedrooms()\n  return (\n    <Select {...props}>\n      {data.map(x => (\n        <Select.Option key={x.id} value={x.name}>\n          {x.name}\n        </Select.Option>\n      ))}\n    </Select>\n  )\n}\n\nexport function useAppointmentTypes() {\n  const { data = [], ...rest } = useSWR<string[]>(\n    '/api/v1/b1/getAppointmentTypes'\n  )\n\n  const _data = data?.map(x => ({ id: uuid(), name: x }))\n\n  return {\n    ...rest,\n    data: _data,\n  }\n}\n\nexport function AppointmentTypeSelect(props: SelectProps<any>) {\n  const { data } = useAppointmentTypes()\n  return (\n    <Select {...props}>\n      {data.map(x => (\n        <Select.Option key={x.id} value={x.name}>\n          {x.name}\n        </Select.Option>\n      ))}\n    </Select>\n  )\n}\n","import React from 'react'\n// import { envStore } from '@/constants/env'\n\nexport default class SnippetDragPreview extends React.Component {\n  render() {\n    // const dropType = this.props.canDrop ? 'allow' : 'forbid'\n    // const url = `${envStore.publicUrl}/images/icon-drag-${dropType}-drop@2x.png`\n\n    return <div>{/* <img width={160} src={url} alt={url} /> */}</div>\n  }\n}\n","import React from 'react'\nimport { XYCoord, DragLayer } from 'react-dnd'\nimport { Identifier } from 'dnd-core'\nimport ItemTypes from '@/constants/item-types'\nimport SnippetDragPreview from '@/components/snippet-drag-preview'\nimport { canMoveSnippet } from './snippet-utils'\n\nconst layerStyles: React.CSSProperties = {\n  position: 'fixed',\n  pointerEvents: 'none',\n  zIndex: 100,\n  left: 0,\n  top: 0,\n  width: '100%',\n  height: '100%',\n}\n\ninterface DragLayerProps {\n  item?: any\n  itemType?: Identifier | null\n  initialOffset?: XYCoord | null\n  currentOffset?: XYCoord | null\n  isDragging?: boolean\n}\n\nfunction getItemStyles(props: DragLayerProps) {\n  const { initialOffset, currentOffset } = props\n\n  if (!initialOffset || !currentOffset) {\n    return {\n      display: 'none',\n    }\n  }\n\n  const { x, y } = currentOffset\n\n  const transform = `translate(${x}px, ${y}px)`\n  return {\n    transform,\n    WebkitTransform: transform,\n  }\n}\n\nconst SnippetDragLayer: React.FC<DragLayerProps> = props => {\n  const { itemType, isDragging, currentOffset } = props\n\n  function renderItem({ canDrop }: { canDrop: boolean }) {\n    switch (itemType) {\n      case ItemTypes.BOARD:\n      case ItemTypes.SNIPPET:\n        return <SnippetDragPreview canDrop={canDrop} />\n      default:\n        return null\n    }\n  }\n\n  if (!isDragging) {\n    return null\n  }\n\n  if (!currentOffset) {\n    return null\n  }\n\n  const element = document.elementFromPoint(currentOffset.x, currentOffset.y)\n\n  let canDrop = false\n  if (element) {\n    canDrop = canMoveSnippet(element)\n  }\n\n  return (\n    <div className=\"report-template-builder__drag-layer\" style={layerStyles}>\n      <div style={getItemStyles(props)}>{renderItem({ canDrop })}</div>\n    </div>\n  )\n}\n\nexport default DragLayer(monitor => ({\n  item: monitor.getItem(),\n  itemType: monitor.getItemType(),\n  initialOffset: monitor.getInitialSourceClientOffset(),\n  currentOffset: monitor.getSourceClientOffset(),\n  isDragging: monitor.isDragging(),\n}))(SnippetDragLayer)\n","import { pathOr, map, keys, flatten, forEach } from 'ramda'\nimport useSWR from '@/hooks/useSWR'\nimport { QueryVariables, Mutation, MutationOptions } from '@/constants/types'\nimport { Doctor } from '@/services/pathology'\nimport { useRequest } from '@/utils/request'\nimport { mapIndexed } from '@/utils/webHelper'\nconst { compose } = require('ramda')\n\nexport type QueryResult = {\n  yearMonth: string\n  date: string\n  doctor: string\n  period: string\n}\n\nexport function useShifts({\n  lazy,\n  onCompleted,\n  onError,\n  ...variables\n}: QueryVariables = {}) {\n  const { data, ...rest } = useSWR<QueryResult[]>(\n    `/api/v1/d1/getDoctorShift/{date}`,\n    {\n      variables,\n      onCompleted,\n      onError,\n      lazy,\n    }\n  )\n\n  let shiftById: { [key: string]: QueryResult[] } = {}\n\n  compose(\n    forEach((x: QueryResult) => {\n      if (!shiftById[x.date]) {\n        shiftById[x.date] = [x]\n      } else {\n        shiftById[x.date].push(x)\n      }\n    }),\n    pathOr([], [])\n  )(data)\n\n  return {\n    ...rest,\n    shiftById,\n    data,\n  }\n}\n\nexport function useCreateOrUpdateShift(options: MutationOptions = {}) {\n  const { loading, mutate } = useRequest(`/api/v1/d1/createShift`, {\n    ...options,\n    method: 'POST',\n  })\n\n  const handler = (values: {\n    date: moment.Moment\n    doctorList: { [key: number]: any[] }\n  }) => {\n    let payload = compose(\n      flatten,\n      map((key: React.Key) =>\n        compose(\n          mapIndexed((x: Doctor, idx: number) => ({\n            date: +key,\n            year_month: values.date.format('YYYY-MM'),\n            period: idx === 0 ? '00:00~1200' : '12:00~24:00',\n            doctor: x.doctor,\n          })),\n          pathOr([], ['doctorList', key])\n        )(values)\n      ),\n      keys,\n      pathOr({}, ['doctorList'])\n    )(values)\n\n    return mutate(payload)\n  }\n\n  return [loading, handler] as Mutation\n}\n","export default {\n  CARD: 'CARD',\n}\n","import React from 'react'\nimport { DragSource, ConnectDragPreview, ConnectDragSource } from 'react-dnd'\nimport { getEmptyImage } from 'react-dnd-html5-backend'\nimport { Doctor } from '@/services/pathology'\nimport ItemTypes from './item-types'\n\ntype Props = {\n  item: Doctor\n  index?: number\n  style?: React.CSSProperties\n  className?: string\n  draggable?: boolean\n  isDragging?: boolean\n  connectDragPreview?: ConnectDragPreview\n  connectDragSource?: ConnectDragSource\n}\n\nconst withDragSource = DragSource(\n  ItemTypes.CARD,\n  {\n    beginDrag(props: Props) {\n      return {\n        ...props.item,\n      }\n    },\n    canDrag() {\n      return true\n    },\n  },\n  (connect, monitor) => ({\n    connectDragSource: connect.dragSource(),\n    connectDragPreview: connect.dragPreview(),\n    isDragging: monitor.isDragging(),\n  })\n)\n\nclass DoctorCard extends React.Component<Props> {\n  componentDidMount = () => {\n    const { connectDragPreview } = this.props\n    if (connectDragPreview) {\n      connectDragPreview(getEmptyImage() /* { anchorX: 0.2, anchorY: 0.1 } */)\n    }\n  }\n\n  render() {\n    const {\n      item,\n      className,\n      style,\n      connectDragSource = (node: any) => node,\n      connectDragPreview = (node: any) => node,\n      isDragging,\n    } = this.props\n\n    const _style = {\n      ...style,\n      border: `1px ${isDragging ? 'dashed' : 'solid'} #ddd`,\n    }\n\n    return connectDragSource(\n      connectDragPreview(\n        <div key={item.id} className={className} style={_style}>\n          醫師 {item.doctor}\n        </div>\n      )\n    )\n  }\n}\n\nexport default withDragSource(DoctorCard)\n","import React from 'react'\nimport cx from 'classnames'\nimport { CloseOutlined } from '@ant-design/icons'\nimport { DropTarget, ConnectDropTarget } from 'react-dnd'\nimport styled from 'styled-components'\nimport { lt, __, length, allPass, propEq, find, isNil } from 'ramda'\nimport { Doctor } from '@/services/pathology'\nimport ItemTypes from './item-types'\nconst { compose } = require('ramda')\n\ninterface Props {\n  draggingItem?: any\n  isOver?: boolean\n  index: number\n  canDrop?: boolean\n  doctors: any[]\n  className?: string\n  style?: React.CSSProperties\n  connectDropTarget: ConnectDropTarget\n  onDoctorDrop(data: any): void\n  onDoctorRemove(data: any): void\n}\n\nconst BlockPlaceHolder = styled.div.attrs({\n  className: 'px-6 py-4 block-placeholder',\n})`\n  display: flex;\n  align-items: center;\n  border: rgba(225, 225, 225, 0.9) 2px dashed;\n  background-color: transparent;\n`\n\nconst withDropTarget = DropTarget<Props>(\n  ItemTypes.CARD,\n  {\n    drop({ index }, monitor, component) {\n      const item = monitor.getItem()\n\n      component.handleDoctorDrop(item, index)\n    },\n    canDrop({ doctors }, monitor) {\n      const item = monitor.getItem()\n\n      return allPass([\n        compose(lt(__, 2), length),\n        compose(isNil, find(propEq('id', item.id))),\n      ])(doctors)\n    },\n  },\n  (connect, monitor) => ({\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n    canDrop: monitor.canDrop(),\n    didDrop: monitor.didDrop(),\n    draggingItem: monitor.getItem(),\n  })\n)\n\nclass ImageSchedulerCalendar extends React.Component<Props> {\n  handleDoctorDrop = (item: any, index: number) => {\n    this.props.onDoctorDrop({ ...item, index })\n  }\n\n  handleDoctorRemove = (x: any) => () => {\n    this.props.onDoctorRemove(x)\n  }\n\n  render() {\n    const {\n      connectDropTarget,\n      isOver,\n      canDrop,\n      doctors = [],\n      className,\n      style,\n    } = this.props\n\n    let itemHeight = `${100 / (doctors.length > 0 ? 2 : 1)}%`\n\n    return connectDropTarget(\n      <div\n        className={cx('w-full', className)}\n        style={{ height: '100%', ...style }}>\n        {doctors.map((x: Doctor) => (\n          <div\n            key={`scheduled-doctor-${x.id}`}\n            className=\"bg-login-cyan text-white flex items-center justify-center px-6 py-4 relative\"\n            css={{\n              height: itemHeight,\n              marginBottom: '0.1rem',\n            }}>\n            <div>\n              {x.doctor}\n              <CloseOutlined\n                onClick={this.handleDoctorRemove(x)}\n                style={{\n                  position: 'absolute',\n                  right: 5,\n                  top: 9,\n                  fontSize: 12,\n                  cursor: 'pointer',\n                }}\n              />\n            </div>\n          </div>\n        ))}\n        {isOver && canDrop && (\n          <BlockPlaceHolder style={{ height: itemHeight }} />\n        )}\n      </div>\n    )\n  }\n}\n\nexport default compose(withDropTarget)(ImageSchedulerCalendar)\n","import React from 'react'\nimport moment from 'moment'\nimport { Form, Row, Col, DatePicker, Spin, message } from 'antd'\nimport { invoker, identity, times, pathOr, forEach, map } from 'ramda'\nimport useTitle from '@/hooks/useTitle'\nimport { useBreadcrumb, useHeaderContent } from '@/hooks/useApp'\nimport useRouteLeaveConfirm from '@/hooks/useRouteLeaveConfirm'\nimport { Page } from '@/components/layout'\nimport Button from '@/components/button'\nimport DragLayer from '@/components/snippet-drag-layer'\nimport DndProvider from '@/components/snippet-scrollable-container'\nimport {\n  useShifts,\n  useCreateOrUpdateShift,\n  QueryResult,\n} from '@/services/shift'\nimport { useDoctors, Doctor } from '@/services/pathology'\nimport DraggableDoctorCard from './draggable-doctor-card'\nimport ImageSchedulerCalendar from './image-scheduler-calendar'\nconst { compose } = require('ramda')\n\nconst MonthPicker = DatePicker.MonthPicker\n\nexport default function ImageScheduler() {\n  useTitle('影像排班')\n\n  useBreadcrumb([{ name: '影像排班' }])\n\n  const handleConfirm = useRouteLeaveConfirm('/')\n\n  const [date, setDate] = React.useState(moment())\n\n  const [doctorList, setDoctorList] = React.useState<{ [key: string]: any[] }>(\n    {}\n  )\n\n  const { refetch, loading, called, revalidate } = useShifts({\n    date: date.format('YYYY-MM'),\n    lazy: true,\n    onCompleted: (data: QueryResult[]) => {\n      const shiftById: { [key: string]: QueryResult[] } = {}\n\n      compose(\n        forEach((x: QueryResult) => {\n          const data = { ...x, id: `${x.date}${x.period}`, index: x.date }\n\n          if (!shiftById[x.date]) {\n            shiftById[x.date] = [data]\n          } else {\n            shiftById[x.date].push(data)\n          }\n        }),\n        pathOr([], [])\n      )(data)\n\n      setDoctorList(shiftById)\n    },\n  })\n\n  const [validating, handleSave] = useCreateOrUpdateShift({\n    onCompleted: response => {\n      revalidate()\n      message.success('儲存成功')\n    },\n  })\n\n  const handleOk = () => {\n    handleSave({ date, doctorList })\n  }\n\n  useHeaderContent(\n    <div className=\"inline-flex\">\n      <Button\n        color=\"outline\"\n        className=\"ml-6 bg-transparent text-white border-white\"\n        onClick={handleOk}>\n        儲存\n      </Button>\n      <Button\n        color=\"outline\"\n        className=\"ml-6 bg-transparent text-white border-white\"\n        onClick={handleConfirm}>\n        放棄\n      </Button>\n    </div>\n  )\n\n  const { doctorEnums } = useDoctors()\n\n  const handleMonthChange = (value: moment.Moment | null) => {\n    if (value) {\n      setDate(value)\n    }\n  }\n\n  const handleSearch = () => {\n    refetch({ date: date.format('YYYY-MM') })\n  }\n\n  const handleDoctorDrop = ({ index, ...data }: any) => {\n    setDoctorList(prev => {\n      const list = pathOr([], [index])(prev)\n      return {\n        ...prev,\n        [index]: [...list, { index, ...data }],\n      }\n    })\n  }\n\n  const handleDoctorRemove = ({ index, ...data }: any) => {\n    setDoctorList(prev => {\n      const list = pathOr([], [index])(prev)\n      return {\n        ...prev,\n        [index]: list.filter((x: any) => x.id !== data.id),\n      }\n    })\n  }\n\n  let calendar: JSX.Element[] = []\n\n  compose(\n    forEach((idx: number) => {\n      calendar.push(\n        <Col key={`calendar-${idx}`} span={3}>\n          <div className=\"py-4 bg-gray-300 text-center\">\n            {date.month() + 1}/{idx + 1}\n          </div>\n          <div className=\"h-20 border border-gray-300\">\n            <ImageSchedulerCalendar\n              index={idx}\n              doctors={pathOr([], [idx])(doctorList)}\n              onDoctorDrop={handleDoctorDrop}\n              onDoctorRemove={handleDoctorRemove}\n            />\n          </div>\n        </Col>\n      )\n    }),\n    times(identity),\n    invoker(0, 'daysInMonth')()\n  )(date)\n\n  return (\n    <DndProvider>\n      <DragLayer />\n      <Spin spinning={loading || validating}>\n        <Page>\n          <Row className=\"mb-6\">\n            <Col span={24}>\n              <div className=\"rounded-xl p-4 bg-white\">\n                <Form layout=\"inline\" colon={false}>\n                  <Form.Item label=\"排班年月\">\n                    <MonthPicker\n                      allowClear={false}\n                      value={date}\n                      onChange={handleMonthChange}\n                    />\n                  </Form.Item>\n                  <Button\n                    color=\"primary\"\n                    className=\"ml-4\"\n                    onClick={handleSearch}>\n                    查詢\n                  </Button>\n                </Form>\n              </div>\n            </Col>\n          </Row>\n          {called && (\n            <>\n              <Row className=\"mb-6\">\n                <Col span={24}>\n                  <h2 className=\"text-base font-normal\">醫師列表</h2>\n                  <div className=\"bg-white rounded-xl p-4\">\n                    <Row gutter={8}>\n                      {map(\n                        (x: Doctor) => (\n                          <Col span={3} key={x.id}>\n                            <DraggableDoctorCard\n                              draggable\n                              item={x}\n                              className=\"bg-login-cyan text-white flex items-center justify-center px-6 py-4 mb-2 cursor-move\"\n                            />\n                          </Col>\n                        ),\n                        doctorEnums\n                      )}\n                    </Row>\n                  </div>\n                </Col>\n              </Row>\n              <Row>\n                <Col span={24}>\n                  <h2 className=\"text-base font-normal\">排班列表</h2>\n                  <div className=\"bg-white rounded-xl p-4\">\n                    <Row>{calendar}</Row>\n                  </div>\n                </Col>\n              </Row>\n            </>\n          )}\n        </Page>\n      </Spin>\n    </DndProvider>\n  )\n}\n"],"sourceRoot":""}