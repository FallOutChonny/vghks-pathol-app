{"version":3,"sources":["hooks/useSnippetList.ts","containers/report-templates/snippet-list-menu-item.tsx","containers/report-templates/snippet-list-menu.tsx","containers/report-templates/snippet-drag-preview.js","containers/report-templates/snippet-drag-layer.tsx","containers/report-templates/block-placeholder.ts","containers/report-templates/snippets-container.tsx","containers/report-templates/components.tsx","containers/report-templates/report-template-builder.tsx","hooks/useVisible.ts"],"names":["compose","require","templateCategory","CLINICAL_HISTORY","HIGHT_RISK_REASONS","DATA_OF_PRIOR_SIMILAR_STUDY","IMAGING_PROTOCOL","TUMOR_LOCATION","snippetListState","atom","key","default","mergeAll","map","values","snippetCategoryState","head","useSnippetList","state","useRecoilState","React","useEffect","withDragSource","DragSource","ItemTypes","BOARD","beginDrag","props","children","className","rest","fromMenu","endDrag","_","monitor","didDrop","isDragging","id","getItem","connect","connectDragSource","dragSource","connectDragPreview","dragPreview","SnippetListMenuItem","this","SnippetListMenuWrapper","ref","comp","Component","styled","div","SnippetListMenu","cx","snippetList","item","FontColorsOutlined","name","SnippetDragPreview","layerStyles","position","pointerEvents","zIndex","left","top","width","height","getItemStyles","initialOffset","currentOffset","display","x","y","transform","WebkitTransform","DragLayer","itemType","getItemType","getInitialSourceClientOffset","getSourceClientOffset","element","document","elementFromPoint","canDrop","canMoveSnippet","style","SNIPPET","renderItem","attrs","p","border","withDropTarget","DropTarget","drop","component","draggable","placeholderIndex","handleSnippetDrop","handleSnippetMove","length","isOver","clientOffset","getClientOffset","hover","getPlaceHolderIndex","isOverSnippet","overSnippet","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","equals","setState","console","log","connectDropTarget","dropTarget","draggingItem","SnippetsContainer","atIndex","handleFindSnippet","snippet","index","newList","isPlaced","forEach","s","idx","push","onSnippetUpdate","droppedItem","nextIndex","uuid","update","$splice","handleSnippetRemove","handleSnippetUpdate","data","$set","filter","indexOf","isPlaceHold","cardList","undefined","wrapperId","findSnippet","removeSnippet","onUpdate","defaultProps","withRouter","StyledCollapse","theme","primary","StyledTabs","secondary","whiteSpace","ReportTemplateBuilder","useTitle","useBreadcrumb","setBreadcrumbItems","useHeaderContent","setHeaderContent","href","REPORT_TEMPLATE_LIST","color","onClick","handleSave","handlePreview","useState","setTemplateInfo","handleInputChange","field","evt","prev","target","value","useSnippetCategory","category","setCategory","setSnippetList","JSON","stringify","omit","pathOr","keys","onRequestOpen","visible","setVisible","handleVisible","handleClose","useVisible","isPreview","handleUpdate","handleTabAdd","新標籤頁","handleTabRemove","targetKey","confirm","title","content","onOk","_snippetList","onCancel","RowM","gutter","span","defaultActiveKey","expandIconPosition","expandIcon","isActive","MinusOutlined","PlusOutlined","Panel","header","onChange","type","activeKey","onEdit","e","action","TabPane","forceRender","closable","tab","contentEditable","suppressContentEditableWarning","spellCheck","innerHTML","newTabName"],"mappings":"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","file":"static/js/12.cc0474fd.chunk.js","sourcesContent":["import React from 'react'\nimport { atom, useRecoilState } from 'recoil'\nimport { mergeAll, map, values, head } from 'ramda'\nconst { compose } = require('ramda')\n\nexport const templateCategory = {\n  CLINICAL_HISTORY: 'Clinical History',\n  HIGHT_RISK_REASONS: 'Hight Risk Reasons',\n  DATA_OF_PRIOR_SIMILAR_STUDY: 'Data of prior similar study',\n  IMAGING_PROTOCOL: 'Imaging Protocal',\n  TUMOR_LOCATION: 'Tumor Location/Size',\n}\n\nconst snippetListState = atom<{ [key: string]: any[] }>({\n  key: 'snippetListState',\n  default: compose(\n    mergeAll,\n    map((key: string) => ({ [key]: [] })),\n    values\n  )(templateCategory),\n})\n\nconst snippetCategoryState = atom<string>({\n  key: 'snippetCategoryState',\n  default: compose(head, values)(templateCategory),\n})\n\nexport function useSnippetList(values?: any) {\n  const state = useRecoilState(snippetListState)\n\n  React.useEffect(() => {}, [])\n\n  return state\n}\n\nexport function useSnippetCategory(values?: any) {\n  const state = useRecoilState(snippetCategoryState)\n\n  React.useEffect(() => {}, [])\n\n  return state\n}\n\nexport default useSnippetList\n","import React from 'react'\nimport { DragSource, ConnectDragSource } from 'react-dnd'\nimport styled from 'styled-components'\nimport ItemTypes from './item-types'\n\ninterface Props {\n  connectDragSource: ConnectDragSource\n  children?: React.ReactNode\n  className?: string\n  id?: React.Key\n}\n\nconst withDragSource = DragSource(\n  ItemTypes.BOARD,\n  {\n    beginDrag(props: Props) {\n      const { children, className, ...rest } = props // eslint-disable-line\n      return {\n        ...rest,\n        fromMenu: true,\n      }\n    },\n    endDrag(_, monitor) {\n      if (!monitor.didDrop()) {\n        return\n      }\n    },\n    isDragging(props, monitor) {\n      const isDragging = props.id === monitor.getItem().id\n\n      return isDragging\n    },\n  },\n  (connect, monitor) => ({\n    connectDragSource: connect.dragSource(),\n    connectDragPreview: connect.dragPreview(),\n    isDragging: monitor.isDragging(),\n  })\n)\n\nclass SnippetListMenuItem extends React.Component<Props> {\n  render() {\n    const { connectDragSource, id, ...rest } = this.props\n\n    return (\n      <SnippetListMenuWrapper\n        {...rest}\n        ref={comp => connectDragSource(comp)}\n        id={`${id}`}>\n        <div className=\"snippet-drawer-menu__item--content\">\n          {this.props.children}\n        </div>\n      </SnippetListMenuWrapper>\n    )\n  }\n}\n\nconst SnippetListMenuWrapper = styled.div`\n  cursor: move;\n`\n\nexport default withDragSource(SnippetListMenuItem)\n","import React from 'react'\nimport cx from 'classnames'\nimport { FontColorsOutlined } from '@ant-design/icons'\nimport styled from 'styled-components'\nimport Box from '@/components/box'\nimport SnippetListMenuItem from './snippet-list-menu-item'\nimport snippetList from './template-list'\n\ninterface Props {\n  className?: string\n  style?: React.CSSProperties\n}\n\nexport default class SnippetListMenu extends React.Component<Props> {\n  render() {\n    return (\n      <SnippetListMenuWrapper\n        className={cx('snippet-drawer-menu', this.props.className)}\n        {...this.props}>\n        <Box className=\"snippet-drawer-menu__list\">\n          {snippetList.map(item => (\n            <SnippetListMenuItem\n              {...item}\n              key={item.id}\n              className=\"snippet-drawer-menu__item py-3\">\n              <Box className=\"flex items-center\">\n                <FontColorsOutlined className=\"mr-2\" />\n                {item.name}\n              </Box>\n            </SnippetListMenuItem>\n          ))}\n        </Box>\n      </SnippetListMenuWrapper>\n    )\n  }\n}\n\nconst SnippetListMenuWrapper = styled.div`\n  .snippet-drawer-menu {\n    &__list {\n      height: 100%;\n      overflow-y: auto;\n      overflow-x: hidden;\n\n      ::-webkit-scrollbar {\n        display: none;\n      }\n    }\n  }\n`\n","import React from 'react'\n// import { envStore } from '@/constants/env'\n\nexport default class SnippetDragPreview extends React.Component {\n  render() {\n    // const dropType = this.props.canDrop ? 'allow' : 'forbid'\n    // const url = `${envStore.publicUrl}/images/icon-drag-${dropType}-drop@2x.png`\n\n    return <div>{/* <img width={160} src={url} alt={url} /> */}</div>\n  }\n}\n","import React from 'react'\nimport { XYCoord, DragLayer } from 'react-dnd'\nimport { Identifier } from 'dnd-core'\nimport ItemTypes from './item-types'\nimport SnippetDragPreview from './snippet-drag-preview'\nimport { canMoveSnippet } from './utils'\n\nconst layerStyles: React.CSSProperties = {\n  position: 'fixed',\n  pointerEvents: 'none',\n  zIndex: 100,\n  left: 0,\n  top: 0,\n  width: '100%',\n  height: '100%',\n}\n\ninterface DragLayerProps {\n  item?: any\n  itemType?: Identifier | null\n  initialOffset?: XYCoord | null\n  currentOffset?: XYCoord | null\n  isDragging?: boolean\n}\n\nfunction getItemStyles(props: DragLayerProps) {\n  const { initialOffset, currentOffset } = props\n\n  if (!initialOffset || !currentOffset) {\n    return {\n      display: 'none',\n    }\n  }\n\n  const { x, y } = currentOffset\n\n  const transform = `translate(${x}px, ${y}px)`\n  return {\n    transform,\n    WebkitTransform: transform,\n  }\n}\n\nconst SnippetDragLayer: React.FC<DragLayerProps> = props => {\n  const { itemType, isDragging, currentOffset } = props\n\n  function renderItem({ canDrop }: { canDrop: boolean }) {\n    switch (itemType) {\n      case ItemTypes.BOARD:\n      case ItemTypes.SNIPPET:\n        return <SnippetDragPreview canDrop={canDrop} />\n      default:\n        return null\n    }\n  }\n\n  if (!isDragging) {\n    return null\n  }\n\n  if (!currentOffset) {\n    return null\n  }\n\n  const element = document.elementFromPoint(currentOffset.x, currentOffset.y)\n\n  let canDrop = false\n  if (element) {\n    canDrop = canMoveSnippet(element)\n  }\n\n  return (\n    <div className=\"report-template-builder__drag-layer\" style={layerStyles}>\n      <div style={getItemStyles(props)}>{renderItem({ canDrop })}</div>\n    </div>\n  )\n}\n\nexport default DragLayer(monitor => ({\n  item: monitor.getItem(),\n  itemType: monitor.getItemType(),\n  initialOffset: monitor.getInitialSourceClientOffset(),\n  currentOffset: monitor.getSourceClientOffset(),\n  isDragging: monitor.isDragging(),\n}))(SnippetDragLayer)\n","import styled from 'styled-components'\n\ntype Props = {\n  border?: string\n}\n\nexport default styled.div.attrs({\n  className: 'block-placeholder',\n})<Props>`\n  display: flex;\n  align-items: center;\n  padding-left: 25px;\n  height: 50px;\n  border: rgba(225, 225, 225, 0.9) 2px ${p => p.border || 'dashed'};\n  background-color: transparent;\n  margin-bottom: 35px;\n`\n","/**\n * NOTE:\n * nerver using index as list component key forever,\n * it will completely fucked up your page\n */\nimport React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { DropTarget, ConnectDropTarget, XYCoord } from 'react-dnd'\nimport { equals, length } from 'ramda'\nimport update from 'immutability-helper'\nimport cx from 'classnames'\nimport { uuid } from '@/utils/webHelper'\nimport Snippet from './snippet'\nimport BlockPlaceholder from './block-placeholder'\nimport ItemTypes from './item-types'\nimport { canMoveSnippet, getPlaceHolderIndex } from './utils'\nconst { compose } = require('ramda')\n\ninterface Props {\n  draggingItem: any\n  isOver?: boolean\n  draggable?: boolean\n  canDrop?: boolean\n  snippetList: any[]\n  connectDropTarget: ConnectDropTarget\n  onSnippetUpdate(data: any): void\n}\n\ninterface State {\n  placeholderIndex: number | null\n}\n\nconst withDropTarget = DropTarget<Props>(\n  ItemTypes.BOARD,\n  {\n    drop(_, monitor, component) {\n      if (!component || !component.props.draggable) {\n        return\n      }\n\n      const canDrop = monitor.canDrop()\n      let { placeholderIndex } = component.state\n      const item = monitor.getItem()\n\n      if (canDrop && item.fromMenu) {\n        component.handleSnippetDrop({ ...item, placeholderIndex })\n      }\n\n      if (canDrop && !item.fromMenu) {\n        component.handleSnippetMove(item.id, placeholderIndex)\n      }\n    },\n    canDrop({ snippetList }, monitor) {\n      // if there is no items in cards, and is over on the board currently,\n      // we can display a placeholder and drop the snippet item on the board.\n      if (snippetList.length === 0 && monitor.isOver()) {\n        return true\n      }\n\n      const clientOffset = monitor.getClientOffset() as XYCoord\n      const element = document.elementFromPoint(clientOffset.x, clientOffset.y)\n\n      return canMoveSnippet(element)\n    },\n    hover(_, monitor, component) {\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset() as XYCoord\n\n      let {\n        placeholderIndex,\n        isOverSnippet,\n        overSnippet,\n      } = getPlaceHolderIndex(clientOffset)\n\n      // 還要判斷是否是在最後一個 snippet 下面及 snippets-container 裡面\n      if (!isOverSnippet) {\n        console.log(placeholderIndex)\n        return\n      }\n\n      const hoverBoundingRect = overSnippet.getBoundingClientRect()\n      const hoverMiddleY =\n        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top\n\n      if (hoverClientY < hoverMiddleY) {\n        placeholderIndex -= 1\n      }\n\n      if (\n        monitor.canDrop() &&\n        !equals(component.state.placeholderIndex, placeholderIndex)\n      ) {\n        component.setState({ placeholderIndex })\n      }\n    },\n  },\n  (connect, monitor) => ({\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n    canDrop: monitor.canDrop(),\n    didDrop: monitor.didDrop(),\n    draggingItem: monitor.getItem(),\n  })\n)\n\nclass SnippetsContainer extends React.Component<Props, State> {\n  static defaultProps = {\n    draggable: true,\n    snippetList: [],\n  }\n\n  public state: State = {\n    placeholderIndex: null,\n  }\n\n  handleSnippetMove = (id: React.Key, atIndex: number) => {\n    const snippetList = [...this.props.snippetList]\n    const { snippet, index } = this.handleFindSnippet(id)\n\n    const newList = []\n    let isPlaced = false\n\n    snippetList.forEach((s, idx) => {\n      if (idx === index) {\n        return\n      }\n\n      if (!isPlaced && atIndex < idx) {\n        newList.push(snippet)\n        isPlaced = true\n      }\n\n      newList.push(s)\n\n      if (!isPlaced && atIndex === idx) {\n        newList.push(snippet)\n        isPlaced = true\n      }\n    })\n\n    // we dropped the only one snippet in the list so let it back to list.\n    if (length(snippetList) === 1 && !atIndex) {\n      newList.push(snippet)\n    }\n\n    this.setState({ placeholderIndex: null })\n    this.props.onSnippetUpdate(newList)\n  }\n\n  // prettier-ignore\n  handleSnippetDrop = (droppedItem: { [key: string]: any; placeholderIndex: number }) => {\n    const { placeholderIndex, ...item } = droppedItem\n\n    const snippetList = [...this.props.snippetList]\n\n    const nextIndex = placeholderIndex + 1\n    let newList = []\n\n    const snippet = {\n      ...item,\n      fromMenu: false,\n      id: `${item.id}__${uuid()}`,\n    }\n\n    if (length(snippetList) === 0) {\n      newList = update(snippetList, { $splice: [[0, 0, snippet]] })\n    }\n    if (length(snippetList) > 0) {\n      newList = update(snippetList, { $splice: [[nextIndex, 0, snippet]] })\n    }\n\n    this.setState({ placeholderIndex: null })\n    this.props.onSnippetUpdate(newList)\n  }\n\n  handleSnippetRemove = (index: number) => {\n    this.props.onSnippetUpdate(\n      update(this.props.snippetList, {\n        $splice: [[index, 1]],\n      })\n    )\n  }\n\n  handleSnippetUpdate = (data: any) => {\n    const { snippet, index } = this.handleFindSnippet(data.id)\n\n    this.props.onSnippetUpdate(\n      update(this.props.snippetList, {\n        [index]: { $set: { ...snippet, ...data } },\n      })\n    )\n  }\n\n  handleFindSnippet = (id: React.Key) => {\n    const { snippetList } = this.props\n    const snippet = snippetList.filter(x => x.id === id)[0]\n\n    return {\n      snippet,\n      index: snippetList.indexOf(snippet),\n    }\n  }\n\n  render() {\n    const {\n      connectDropTarget,\n      isOver,\n      canDrop,\n      snippetList,\n      draggingItem,\n      draggable, // 模版是否可拖曳，編輯模式下才會是 true\n    } = this.props\n\n    const { placeholderIndex } = this.state\n\n    let isPlaceHold = false\n    const cardList = []\n\n    snippetList.forEach((item, idx) => {\n      if (isOver && canDrop) {\n        isPlaceHold = false\n        if (idx === 0 && placeholderIndex === -1) {\n          cardList.push(<BlockPlaceholder key={`block-placeholder-${idx}`} />)\n        } else if ((placeholderIndex as any) > idx) {\n          isPlaceHold = true\n        }\n      }\n\n      if (item !== undefined) {\n        cardList.push(\n          <Snippet\n            key={item.id}\n            id={item.id}\n            wrapperId={`snippet-wrapper-${idx}`}\n            index={idx}\n            draggable={draggable}\n            findSnippet={this.handleFindSnippet}\n            removeSnippet={this.handleSnippetRemove}>\n            <item.Component\n              id={item.id}\n              className={item.id}\n              item={item}\n              index={idx}\n              onUpdate={this.handleSnippetUpdate}\n            />\n          </Snippet>\n        )\n      }\n\n      if (isOver && canDrop && placeholderIndex === idx) {\n        cardList.push(<BlockPlaceholder key={`block-placeholder-${idx}`} />)\n      }\n    })\n\n    // if placeholder index is greater than array.length, display placeholder as last\n    if (isPlaceHold) {\n      cardList.push(<BlockPlaceholder key={'block-placeholder-bottom'} />)\n    }\n\n    // if there is no items in cards currently, display a placeholder anyway\n    if (isOver && canDrop && snippetList.length === 0) {\n      cardList.push(<BlockPlaceholder key={'block-placeholder-zero'} />)\n    }\n\n    // if just has only one item in list and currently dragged, display a placeholder\n    if (isOver && canDrop && snippetList.length === 1) {\n      if (!draggingItem.fromMenu) {\n        cardList.push(<BlockPlaceholder key={'block-placeholder-zero'} />)\n      }\n    }\n\n    return connectDropTarget(\n      <div\n        className={cx('report-template-builder__contentarea', {\n          'report-template-builder__contentarea--fixed-layout': !draggable,\n        })}>\n        {cardList}\n      </div>\n    )\n  }\n}\n\nexport default compose(withRouter, withDropTarget)(SnippetsContainer)\n","import { Collapse, Tabs } from 'antd'\nimport styled from 'styled-components'\n\nconst StyledCollapse = styled(Collapse)`\n  &.ant-collapse {\n    border-radius: 16px;\n    border-bottom: none;\n\n    > .ant-collapse-item > .ant-collapse-header {\n      background: rgb(207, 224, 245);\n      color: ${p => p.theme.primary};\n    }\n\n    > .ant-collapse-item:first-child > .ant-collapse-header {\n      border-top-left-radius: 16px;\n      border-top-right-radius: 16px;\n    }\n\n    > .ant-collapse-item:last-child {\n      border-bottom: none;\n    }\n\n    > .ant-collapse-item:last-child > .ant-collapse-content {\n      border-bottom-left-radius: 16px;\n      border-bottom-right-radius: 16px;\n    }\n\n    > .ant-collapse-item.ant-collapse-item-active:last-child {\n      border-bottom: 1px solid #d9d9d9;\n    }\n\n    > .ant-collapse-item:not(.ant-collapse-item-active):last-child\n      > .ant-collapse-header {\n      border-bottom-left-radius: 16px;\n      border-bottom-right-radius: 16px;\n    }\n  }\n`\n\nconst StyledTabs = styled(Tabs)`\n  &.ant-tabs {\n    .ant-tabs-tab {\n      display: flex;\n      align-items: center;\n      padding: 10px 24px !important;\n      margin-right: 4px !important;\n      border-color: rgb(199, 214, 238) !important;\n      background: rgb(199, 214, 238) !important;\n      border-top-left-radius: 12px !important;\n      border-top-right-radius: 12px !important;\n      color: ${p => p.theme.primary};\n    }\n\n    .ant-tabs-tab-active {\n      border-color: #fff !important;\n      background: #fff !important;\n    }\n\n    .ant-tabs-tab .anticon {\n      color: ${p => p.theme.primary};\n    }\n\n    > .ant-tabs-nav .ant-tabs-nav-add,\n    .ant-tabs > div > .ant-tabs-nav .ant-tabs-nav-add {\n      color: ${p => p.theme.primary};\n      border-color: rgb(199, 214, 238);\n      background: rgb(199, 214, 238);\n    }\n\n    .ant-tabs-tab-btn:focus,\n    .ant-tabs-tab-remove:focus,\n    .ant-tabs-tab-btn:active,\n    .ant-tabs-tab-remove:active,\n    .ant-tabs-tab.ant-tabs-tab-active .ant-tabs-tab-btn {\n      color: ${p => p.theme.secondary} !important;\n    }\n  }\n\n  &.ant-tabs-top > .ant-tabs-nav,\n  &.ant-tabs-top > div > .ant-tabs-nav {\n    margin-bottom: 0;\n  }\n`\n\nexport { StyledCollapse as Collapse, StyledTabs as Tabs }\n","import React from 'react'\nimport { Row, Col } from 'antd'\nimport { PlusOutlined, MinusOutlined } from '@ant-design/icons'\nimport { pathOr, keys, head, map, mergeAll, omit } from 'ramda'\nimport styled from 'styled-components'\nimport { Page } from '@/components/layout'\nimport Button from '@/components/button'\nimport Box from '@/components/box'\nimport Input from '@/components/input'\nimport useTitle from '@/hooks/useTitle'\nimport useVisible from '@/hooks/useVisible'\nimport useBreadcrumb from '@/hooks/useBreadcrumb'\nimport useHeaderContent from '@/hooks/useHeaderContent'\nimport { useSnippetList, useSnippetCategory } from '@/hooks/useSnippetList'\nimport { REPORT_TEMPLATE_LIST } from '@/constants/routes'\nimport { confirm } from '@/utils/message'\nimport ReactDndProvider from './react-dnd-provider'\nimport SnippetListMenu from './snippet-list-menu'\nimport SnippetDragLayer from './snippet-drag-layer'\nimport SnippetsContainer from './snippets-container'\nimport SnippetPreviewModal from './snippet-preview-modal'\nimport { Collapse, Tabs } from './components'\nconst { compose } = require('ramda')\n\nexport default function ReportTemplateBuilder() {\n  useTitle('結構式報告模版編輯')\n\n  const [, setBreadcrumbItems] = useBreadcrumb()\n  const [, setHeaderContent] = useHeaderContent()\n\n  React.useEffect(() => {\n    setBreadcrumbItems([\n      { href: REPORT_TEMPLATE_LIST, name: '結構式報告' },\n      { name: '結構式報告模版編輯' },\n    ])\n  }, []) // eslint-disable-line\n\n  React.useEffect(() => {\n    setHeaderContent(\n      <Box className=\"inline-flex\">\n        <Button\n          color=\"outline\"\n          className=\"bg-transparent text-white border-white\">\n          發佈\n        </Button>\n        <Button\n          color=\"outline\"\n          className=\"ml-6 bg-transparent text-white border-white\"\n          onClick={handleSave}>\n          儲存\n        </Button>\n        <Button\n          color=\"outline\"\n          className=\"ml-6 bg-transparent text-white border-white\"\n          onClick={handlePreview}>\n          預覽\n        </Button>\n      </Box>\n    )\n\n    return () => {\n      setHeaderContent(null)\n    }\n  }, []) // eslint-disable-line\n\n  const [, setTemplateInfo] = React.useState({})\n\n  const handleInputChange = (field: string) => (\n    evt: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setTemplateInfo(prev => ({ ...prev, [field]: evt.target.value }))\n  }\n\n  const [category, setCategory] = useSnippetCategory()\n  const [snippetList, setSnippetList] = useSnippetList()\n\n  React.useEffect(() => {\n    console.log(\n      JSON.stringify(\n        compose(\n          mergeAll,\n          map((key: string) => ({\n            [key]: compose(\n              map(omit(['Component'])),\n              pathOr([], [key])\n            )(snippetList),\n          })),\n          keys\n        )(snippetList)\n      )\n    )\n  }, [JSON.stringify(snippetList)]) // eslint-disable-line\n\n  const [isPreview, handlePreview] = useVisible()\n\n  const handleUpdate = (data: any[]) => {\n    setSnippetList(prev => ({ ...prev, [category]: data }))\n  }\n\n  const handleTabChange = (activeKey: string) => {\n    setCategory(activeKey)\n  }\n\n  const handleEdit = (\n    e:\n      | string\n      | React.MouseEvent<Element, MouseEvent>\n      | React.KeyboardEvent<Element>,\n    action: 'add' | 'remove'\n  ) => {\n    const handler = action === 'add' ? handleTabAdd : handleTabRemove\n\n    handler(e as string)\n  }\n\n  const handleTabAdd = () => {\n    setSnippetList(prev => ({ ...prev, 新標籤頁: [] }))\n  }\n\n  const handleTabRemove = (targetKey: string) => {\n    confirm({\n      title: '確認要刪除此頁籤嗎？',\n      content: '刪除會連同模版資料一起刪除，確認繼續？',\n      onOk: () => {\n        setSnippetList(prev => omit([targetKey], prev))\n\n        if (category === targetKey) {\n          setCategory(compose(head, keys)(snippetList))\n        }\n      },\n    })\n  }\n\n  const handleTabNameChange = (targetKey: string) => (\n    evt: React.FocusEvent<HTMLSpanElement>\n  ) => {\n    console.log(evt.target.innerHTML)\n    const newTabName = evt.target.innerHTML\n\n    setSnippetList(prev =>\n      compose(\n        mergeAll,\n        map((key: string) => ({\n          [key === targetKey ? newTabName : key]: prev[key],\n        })),\n        keys\n      )(prev)\n    )\n    setCategory(newTabName)\n  }\n\n  const handleSave = () => {}\n\n  const _snippetList = pathOr([], [category], snippetList)\n\n  return (\n    <ReactDndProvider>\n      {isPreview && (\n        <SnippetPreviewModal\n          snippetList={snippetList}\n          onCancel={handlePreview}\n        />\n      )}\n      <SnippetDragLayer />\n      <Page>\n        <RowM gutter={48} className=\"pt-2\">\n          <Col span={5}>\n            <Collapse\n              defaultActiveKey={[1, 2]}\n              expandIconPosition=\"right\"\n              className=\"shadow-2xl\"\n              expandIcon={({ isActive }) =>\n                isActive ? <MinusOutlined /> : <PlusOutlined />\n              }>\n              <Collapse.Panel header=\"模版資訊\" key={1}>\n                <Row className=\"mb-2 text-sm text-primary\">\n                  <Col span={24} className=\"mb-3\">\n                    <Box className=\"inline-block\" css={{ width: 60 }}>\n                      名稱:\n                    </Box>\n                    <Input\n                      className=\"w-2/3\"\n                      onChange={handleInputChange('name')}\n                    />\n                  </Col>\n                  <Col span={24} className=\"my-3\">\n                    <Box className=\"inline-block\" css={{ width: 60 }}>\n                      描述:\n                    </Box>\n                    <Input\n                      className=\"w-2/3\"\n                      onChange={handleInputChange('description')}\n                    />\n                  </Col>\n                  <Col span={24} className=\"my-3\">\n                    <Box className=\"inline-block\" css={{ width: 60 }}>\n                      創作者:\n                    </Box>\n                    <Input\n                      className=\"w-2/3\"\n                      onChange={handleInputChange('author')}\n                    />\n                  </Col>\n                </Row>\n              </Collapse.Panel>\n              <Collapse.Panel header=\"工具列\" key={2}>\n                <Row>\n                  <Col span={24}>\n                    <SnippetListMenu className=\"text-primary\" />\n                  </Col>\n                </Row>\n              </Collapse.Panel>\n            </Collapse>\n          </Col>\n          <Tabs\n            type=\"editable-card\"\n            activeKey={category}\n            onChange={handleTabChange}\n            onEdit={handleEdit}\n            className=\"flex-1\">\n            {compose(\n              map((key: string) => (\n                <Tabs.TabPane\n                  forceRender\n                  closable\n                  key={key}\n                  tab={\n                    <span\n                      contentEditable\n                      suppressContentEditableWarning\n                      spellCheck={false}\n                      className=\"outline-none\"\n                      css={{ whiteSpace: 'nowrap' }}\n                      onChange={handleTabNameChange(key)}\n                      // onBlur={handleTabNameChange(key)}\n                    >\n                      {key}\n                    </span>\n                  }>\n                  <Col\n                    span={19}\n                    className=\"report-template-builder__main-content\">\n                    <SnippetsContainer\n                      draggable={!isPreview}\n                      snippetList={_snippetList}\n                      onSnippetUpdate={handleUpdate}\n                    />\n                  </Col>\n                </Tabs.TabPane>\n              )),\n              keys\n            )(snippetList)}\n          </Tabs>\n        </RowM>\n      </Page>\n    </ReactDndProvider>\n  )\n}\n\nconst RowM = styled(Row)`\n  position: relative;\n\n  .report-template-builder {\n    &__main-content {\n      min-height: 371.25mm;\n      margin: 0 auto;\n      padding: 16px;\n      box-sizing: border-box;\n      max-width: 100%;\n      background: #fff;\n      border-top-right-radius: 16px;\n      border-bottom-left-radius: 16px;\n      border-bottom-right-radius: 16px;\n    }\n\n    &__contentarea {\n      min-height: 348.75mm;\n    }\n\n    &__contentarea--fixed-layout {\n      min-height: auto;\n    }\n\n    &__snippet-toolbar {\n      visibility: hidden;\n    }\n  }\n\n  .ui-draggable {\n    &:focus,\n    &:active {\n      outline: 0;\n\n      .course-builder__snippet-toolbar {\n        visibility: visible;\n        opacity: 1;\n        transition: visibility 0s, opacity 0.3s, max-height 0.6s linear;\n      }\n    }\n  }\n`\n","import React from 'react'\n\ntype Props = {\n  /**\n   * 開關 Modal 時希望處理的事情\n   */\n  onRequestOpen?: () => any\n}\n\nexport default function useVisible({ onRequestOpen }: Props = {}) {\n  const [visible, setVisible] = React.useState(false)\n\n  const handleVisible: any = (evt: React.MouseEvent<HTMLElement>) => {\n    setVisible(prev => !prev)\n\n    if (onRequestOpen) {\n      onRequestOpen()\n    }\n  }\n\n  const handleClose = () => {\n    setVisible(false)\n  }\n\n  return [visible, handleVisible, handleClose]\n}\n"],"sourceRoot":""}