{"version":3,"sources":["components/snippet-drag-preview.js","components/snippet-drag-layer.tsx","containers/image-scheduler/item-types.ts","containers/image-scheduler/draggable-doctor-card.tsx","containers/image-scheduler/image-scheduler-calendar.tsx","containers/image-scheduler/image-scheduler.tsx"],"names":["SnippetDragPreview","React","Component","layerStyles","position","pointerEvents","zIndex","left","top","width","height","getItemStyles","props","initialOffset","currentOffset","display","x","y","transform","WebkitTransform","DragLayer","monitor","item","getItem","itemType","getItemType","getInitialSourceClientOffset","getSourceClientOffset","isDragging","element","document","elementFromPoint","canDrop","canMoveSnippet","className","style","ItemTypes","BOARD","SNIPPET","renderItem","withDragSource","DragSource","beginDrag","id","canDrag","connect","connectDragSource","dragSource","connectDragPreview","dragPreview","componentDidMount","getEmptyImage","this","node","_style","border","key","compose","require","BlockPlaceHolder","styled","div","attrs","withDropTarget","DropTarget","drop","component","index","handleDoctorDrop","doctors","allPass","lt","__","length","isNil","find","propEq","connectDropTarget","dropTarget","isOver","didDrop","draggingItem","marginBottom","ImageSchedulerCalendar","onDoctorDrop","handleDoctorRemove","onDoctorRemove","itemHeight","cx","map","CloseOutlined","onClick","right","fontSize","cursor","MonthPicker","times","identity","days","invoker","Date","ImageScheduler","handleConfirm","useRouteLeaveConfirm","useTitle","useBreadcrumb","name","useHeaderContent","color","useState","called","setIsCalled","moment","date","setDate","doctorList","setDoctorList","data","prev","list","pathOr","filter","calendar","forEach","idx","push","span","layout","colon","Item","label","allowClear","value","onChange","gutter","draggable"],"mappings":"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","file":"static/js/12.5e3c5b31.chunk.js","sourcesContent":["import React from 'react'\n// import { envStore } from '@/constants/env'\n\nexport default class SnippetDragPreview extends React.Component {\n  render() {\n    // const dropType = this.props.canDrop ? 'allow' : 'forbid'\n    // const url = `${envStore.publicUrl}/images/icon-drag-${dropType}-drop@2x.png`\n\n    return <div>{/* <img width={160} src={url} alt={url} /> */}</div>\n  }\n}\n","import React from 'react'\nimport { XYCoord, DragLayer } from 'react-dnd'\nimport { Identifier } from 'dnd-core'\nimport ItemTypes from '@/constants/item-types'\nimport SnippetDragPreview from '@/components/snippet-drag-preview'\nimport { canMoveSnippet } from './snippet-utils'\n\nconst layerStyles: React.CSSProperties = {\n  position: 'fixed',\n  pointerEvents: 'none',\n  zIndex: 100,\n  left: 0,\n  top: 0,\n  width: '100%',\n  height: '100%',\n}\n\ninterface DragLayerProps {\n  item?: any\n  itemType?: Identifier | null\n  initialOffset?: XYCoord | null\n  currentOffset?: XYCoord | null\n  isDragging?: boolean\n}\n\nfunction getItemStyles(props: DragLayerProps) {\n  const { initialOffset, currentOffset } = props\n\n  if (!initialOffset || !currentOffset) {\n    return {\n      display: 'none',\n    }\n  }\n\n  const { x, y } = currentOffset\n\n  const transform = `translate(${x}px, ${y}px)`\n  return {\n    transform,\n    WebkitTransform: transform,\n  }\n}\n\nconst SnippetDragLayer: React.FC<DragLayerProps> = props => {\n  const { itemType, isDragging, currentOffset } = props\n\n  function renderItem({ canDrop }: { canDrop: boolean }) {\n    switch (itemType) {\n      case ItemTypes.BOARD:\n      case ItemTypes.SNIPPET:\n        return <SnippetDragPreview canDrop={canDrop} />\n      default:\n        return null\n    }\n  }\n\n  if (!isDragging) {\n    return null\n  }\n\n  if (!currentOffset) {\n    return null\n  }\n\n  const element = document.elementFromPoint(currentOffset.x, currentOffset.y)\n\n  let canDrop = false\n  if (element) {\n    canDrop = canMoveSnippet(element)\n  }\n\n  return (\n    <div className=\"report-template-builder__drag-layer\" style={layerStyles}>\n      <div style={getItemStyles(props)}>{renderItem({ canDrop })}</div>\n    </div>\n  )\n}\n\nexport default DragLayer(monitor => ({\n  item: monitor.getItem(),\n  itemType: monitor.getItemType(),\n  initialOffset: monitor.getInitialSourceClientOffset(),\n  currentOffset: monitor.getSourceClientOffset(),\n  isDragging: monitor.isDragging(),\n}))(SnippetDragLayer)\n","export default {\n  CARD: 'CARD',\n}\n","import React from 'react'\nimport { DragSource, ConnectDragPreview, ConnectDragSource } from 'react-dnd'\nimport { getEmptyImage } from 'react-dnd-html5-backend'\nimport ItemTypes from './item-types'\n\ntype Props = {\n  id: number\n  index?: number\n  style?: React.CSSProperties\n  className?: string\n  draggable?: boolean\n  isDragging?: boolean\n  connectDragPreview?: ConnectDragPreview\n  connectDragSource?: ConnectDragSource\n}\n\nconst withDragSource = DragSource(\n  ItemTypes.CARD,\n  {\n    beginDrag(props: Props) {\n      return {\n        id: props.id,\n      }\n    },\n    canDrag() {\n      return true\n    },\n  },\n  (connect, monitor) => ({\n    connectDragSource: connect.dragSource(),\n    connectDragPreview: connect.dragPreview(),\n    isDragging: monitor.isDragging(),\n  })\n)\n\nclass DoctorCard extends React.Component<Props> {\n  componentDidMount = () => {\n    const { connectDragPreview } = this.props\n    if (connectDragPreview) {\n      connectDragPreview(getEmptyImage() /* { anchorX: 0.2, anchorY: 0.1 } */)\n    }\n  }\n\n  render() {\n    const {\n      id,\n      className,\n      style,\n      connectDragSource = (node: any) => node,\n      connectDragPreview = (node: any) => node,\n      isDragging,\n    } = this.props\n\n    const _style = {\n      ...style,\n      border: `1px ${isDragging ? 'dashed' : 'solid'} #ddd`,\n    }\n\n    return connectDragSource(\n      connectDragPreview(\n        <div key={id} className={className} style={_style}>\n          醫師 {id}\n        </div>\n      )\n    )\n  }\n}\n\nexport default withDragSource(DoctorCard)\n","import React from 'react'\nimport cx from 'classnames'\nimport { CloseOutlined } from '@ant-design/icons'\nimport { DropTarget, ConnectDropTarget } from 'react-dnd'\nimport styled from 'styled-components'\nimport { lt, __, length, allPass, propEq, find, isNil } from 'ramda'\nimport ItemTypes from './item-types'\nconst { compose } = require('ramda')\n\ninterface Props {\n  draggingItem?: any\n  isOver?: boolean\n  index: number\n  canDrop?: boolean\n  doctors: any[]\n  className?: string\n  style?: React.CSSProperties\n  connectDropTarget: ConnectDropTarget\n  onDoctorDrop(data: any): void\n  onDoctorRemove(data: any): void\n}\n\nconst BlockPlaceHolder = styled.div.attrs({\n  className: 'px-6 py-4 block-placeholder',\n})`\n  display: flex;\n  align-items: center;\n  border: rgba(225, 225, 225, 0.9) 2px dashed;\n  background-color: transparent;\n`\n\nconst withDropTarget = DropTarget<Props>(\n  ItemTypes.CARD,\n  {\n    drop({ index }, monitor, component) {\n      const item = monitor.getItem()\n\n      component.handleDoctorDrop(item, index)\n    },\n    canDrop({ doctors }, monitor) {\n      const item = monitor.getItem()\n\n      return allPass([\n        compose(lt(__, 2), length),\n        compose(isNil, find(propEq('id', item.id))),\n      ])(doctors)\n    },\n  },\n  (connect, monitor) => ({\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n    canDrop: monitor.canDrop(),\n    didDrop: monitor.didDrop(),\n    draggingItem: monitor.getItem(),\n  })\n)\n\nclass ImageSchedulerCalendar extends React.Component<Props> {\n  handleDoctorDrop = (item: any, index: number) => {\n    this.props.onDoctorDrop({ ...item, index })\n  }\n\n  handleDoctorRemove = (x: any) => () => {\n    this.props.onDoctorRemove(x)\n  }\n\n  render() {\n    const {\n      connectDropTarget,\n      isOver,\n      canDrop,\n      doctors = [],\n      className,\n      style,\n    } = this.props\n\n    let itemHeight = `${100 / (doctors.length > 0 ? 2 : 1)}%`\n\n    return connectDropTarget(\n      <div\n        className={cx('w-full', className)}\n        style={{ height: '100%', ...style }}>\n        {doctors.map(x => (\n          <div\n            key={`scheduled-doctor-${x.id}`}\n            className=\"bg-login-cyan text-white flex items-center justify-center px-6 py-4 relative\"\n            css={{\n              height: itemHeight,\n              marginBottom: '0.1rem',\n            }}>\n            <div>\n              {x.id}\n              <CloseOutlined\n                onClick={this.handleDoctorRemove(x)}\n                style={{\n                  position: 'absolute',\n                  right: 5,\n                  top: 9,\n                  fontSize: 12,\n                  cursor: 'pointer',\n                }}\n              />\n            </div>\n          </div>\n        ))}\n        {isOver && canDrop && (\n          <BlockPlaceHolder style={{ height: itemHeight }} />\n        )}\n      </div>\n    )\n  }\n}\n\nexport default compose(withDropTarget)(ImageSchedulerCalendar)\n","import React from 'react'\nimport moment from 'moment'\nimport { Form, Row, Col, DatePicker } from 'antd'\nimport { invoker, identity, times, map, pathOr } from 'ramda'\nimport useTitle from '@/hooks/useTitle'\nimport { useBreadcrumb, useHeaderContent } from '@/hooks/useApp'\nimport useRouteLeaveConfirm from '@/hooks/useRouteLeaveConfirm'\nimport { Page } from '@/components/layout'\nimport Button from '@/components/button'\nimport DragLayer from '@/components/snippet-drag-layer'\nimport DndProvider from '@/components/snippet-scrollable-container'\nimport DraggableDoctorCard from './draggable-doctor-card'\nimport ImageSchedulerCalendar from './image-scheduler-calendar'\nconst { compose } = require('ramda')\n\nconst MonthPicker = DatePicker.MonthPicker\n\nconst doctors = times(identity)(16)\nconst days = compose(\n  times(identity),\n  invoker(0, 'getDate')()\n)(new Date(2020, 10, 0))\n\nexport default function ImageScheduler() {\n  const handleConfirm = useRouteLeaveConfirm('/')\n\n  useTitle('影像排班')\n\n  useBreadcrumb([{ name: '影像排班' }])\n\n  useHeaderContent(\n    <div className=\"inline-flex\">\n      <Button\n        color=\"outline\"\n        className=\"ml-6 bg-transparent text-white border-white\"\n        // onClick={handleSave}\n      >\n        儲存\n      </Button>\n      <Button\n        color=\"outline\"\n        className=\"ml-6 bg-transparent text-white border-white\"\n        onClick={handleConfirm}>\n        取消\n      </Button>\n    </div>\n  )\n\n  const [called, setIsCalled] = React.useState(false)\n  const [date, setDate] = React.useState(moment())\n  const [doctorList, setDoctorList] = React.useState<{ [key: string]: any[] }>(\n    {}\n  )\n\n  const handleMonthChange = (value: moment.Moment | null) => {\n    if (value) {\n      setDate(value)\n    }\n  }\n\n  const handleSearch = () => {\n    setIsCalled(true)\n  }\n\n  const handleDoctorDrop = ({ index, ...data }: any) => {\n    setDoctorList(prev => {\n      const list = pathOr([], [index])(prev)\n      return {\n        ...prev,\n        [index]: [...list, { index, ...data }],\n      }\n    })\n  }\n\n  const handleDoctorRemove = ({ index, ...data }: any) => {\n    setDoctorList(prev => {\n      const list = pathOr([], [index])(prev)\n      return {\n        ...prev,\n        [index]: list.filter((x: any) => x.id !== data.id),\n      }\n    })\n  }\n\n  let calendar: JSX.Element[] = []\n\n  days.forEach((idx: number) => {\n    calendar.push(\n      <Col key={`calendar-${idx}`} span={3}>\n        <div className=\"py-4 bg-gray-300 text-center\">10/{idx + 1}</div>\n        <div className=\"h-20 border border-gray-300\">\n          <ImageSchedulerCalendar\n            index={idx}\n            doctors={pathOr([], [idx])(doctorList)}\n            onDoctorDrop={handleDoctorDrop}\n            onDoctorRemove={handleDoctorRemove}\n          />\n        </div>\n      </Col>\n    )\n  })\n\n  return (\n    <DndProvider>\n      <DragLayer />\n      <Page>\n        <Row className=\"mb-6\">\n          <Col span={24}>\n            <div className=\"rounded-xl p-4 bg-white\">\n              <Form layout=\"inline\" colon={false}>\n                <Form.Item label=\"排班年月\">\n                  <MonthPicker\n                    allowClear={false}\n                    value={date}\n                    onChange={handleMonthChange}\n                  />\n                </Form.Item>\n                <Button color=\"primary\" className=\"ml-4\" onClick={handleSearch}>\n                  查詢\n                </Button>\n              </Form>\n            </div>\n          </Col>\n        </Row>\n        {called && (\n          <>\n            <Row className=\"mb-6\">\n              <Col span={24}>\n                <h2 className=\"text-base font-normal\">醫師列表</h2>\n                <div className=\"bg-white rounded-xl p-4\">\n                  <Row gutter={8}>\n                    {map(\n                      (idx: number) => (\n                        <Col span={3} key={`doctor-${idx}`}>\n                          <DraggableDoctorCard\n                            id={idx + 1}\n                            draggable\n                            className=\"bg-login-cyan text-white flex items-center justify-center px-6 py-4 mb-2 cursor-move\"\n                          />\n                        </Col>\n                      ),\n                      doctors\n                    )}\n                  </Row>\n                </div>\n              </Col>\n            </Row>\n            <Row>\n              <Col span={24}>\n                <h2 className=\"text-base font-normal\">排班列表</h2>\n                <div className=\"bg-white rounded-xl p-4\">\n                  <Row>{calendar}</Row>\n                </div>\n              </Col>\n            </Row>\n          </>\n        )}\n      </Page>\n    </DndProvider>\n  )\n}\n"],"sourceRoot":""}