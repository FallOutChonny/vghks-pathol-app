{"version":3,"sources":["components/snippet-drag-preview.js","components/snippet-drag-layer.tsx","services/shift.ts","containers/image-scheduler/item-types.ts","containers/image-scheduler/draggable-doctor-card.tsx","containers/image-scheduler/image-scheduler-calendar.tsx","containers/image-scheduler/image-scheduler.tsx"],"names":["SnippetDragPreview","React","Component","layerStyles","position","pointerEvents","zIndex","left","top","width","height","getItemStyles","props","initialOffset","currentOffset","display","x","y","transform","WebkitTransform","DragLayer","monitor","item","getItem","itemType","getItemType","getInitialSourceClientOffset","getSourceClientOffset","isDragging","element","document","elementFromPoint","canDrop","canMoveSnippet","className","style","ItemTypes","BOARD","SNIPPET","renderItem","compose","require","withDragSource","DragSource","beginDrag","canDrag","connect","connectDragSource","dragSource","connectDragPreview","dragPreview","componentDidMount","getEmptyImage","this","node","_style","border","key","id","doctor","BlockPlaceHolder","styled","div","attrs","withDropTarget","DropTarget","drop","component","index","handleDoctorDrop","doctors","allPass","lt","__","length","isNil","find","propEq","connectDropTarget","dropTarget","isOver","didDrop","draggingItem","marginBottom","ImageSchedulerCalendar","onDoctorDrop","handleDoctorRemove","onDoctorRemove","itemHeight","cx","map","CloseOutlined","onClick","right","fontSize","cursor","MonthPicker","ImageScheduler","useTitle","useBreadcrumb","name","handleConfirm","useRouteLeaveConfirm","useState","moment","date","setDate","doctorList","setDoctorList","lazy","onCompleted","onError","variables","useSWR","data","rest","shiftById","forEach","push","pathOr","useShifts","format","period","refetch","loading","called","revalidate","options","useRequest","method","mutate","handler","values","payload","flatten","mapIndexed","idx","year_month","keys","useCreateOrUpdateShift","response","success","validating","handleSave","useHeaderContent","color","doctorEnums","useDoctors","prev","list","filter","calendar","span","month","times","identity","invoker","spinning","layout","colon","Item","label","allowClear","value","onChange","gutter","draggable"],"mappings":"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","file":"static/js/11.f6cd2bec.chunk.js","sourcesContent":["import React from 'react'\n// import { envStore } from '@/constants/env'\n\nexport default class SnippetDragPreview extends React.Component {\n  render() {\n    // const dropType = this.props.canDrop ? 'allow' : 'forbid'\n    // const url = `${envStore.publicUrl}/images/icon-drag-${dropType}-drop@2x.png`\n\n    return <div>{/* <img width={160} src={url} alt={url} /> */}</div>\n  }\n}\n","import React from 'react'\nimport { XYCoord, DragLayer } from 'react-dnd'\nimport { Identifier } from 'dnd-core'\nimport ItemTypes from '@/constants/item-types'\nimport SnippetDragPreview from '@/components/snippet-drag-preview'\nimport { canMoveSnippet } from './snippet-utils'\n\nconst layerStyles: React.CSSProperties = {\n  position: 'fixed',\n  pointerEvents: 'none',\n  zIndex: 100,\n  left: 0,\n  top: 0,\n  width: '100%',\n  height: '100%',\n}\n\ninterface DragLayerProps {\n  item?: any\n  itemType?: Identifier | null\n  initialOffset?: XYCoord | null\n  currentOffset?: XYCoord | null\n  isDragging?: boolean\n}\n\nfunction getItemStyles(props: DragLayerProps) {\n  const { initialOffset, currentOffset } = props\n\n  if (!initialOffset || !currentOffset) {\n    return {\n      display: 'none',\n    }\n  }\n\n  const { x, y } = currentOffset\n\n  const transform = `translate(${x}px, ${y}px)`\n  return {\n    transform,\n    WebkitTransform: transform,\n  }\n}\n\nconst SnippetDragLayer: React.FC<DragLayerProps> = props => {\n  const { itemType, isDragging, currentOffset } = props\n\n  function renderItem({ canDrop }: { canDrop: boolean }) {\n    switch (itemType) {\n      case ItemTypes.BOARD:\n      case ItemTypes.SNIPPET:\n        return <SnippetDragPreview canDrop={canDrop} />\n      default:\n        return null\n    }\n  }\n\n  if (!isDragging) {\n    return null\n  }\n\n  if (!currentOffset) {\n    return null\n  }\n\n  const element = document.elementFromPoint(currentOffset.x, currentOffset.y)\n\n  let canDrop = false\n  if (element) {\n    canDrop = canMoveSnippet(element)\n  }\n\n  return (\n    <div className=\"report-template-builder__drag-layer\" style={layerStyles}>\n      <div style={getItemStyles(props)}>{renderItem({ canDrop })}</div>\n    </div>\n  )\n}\n\nexport default DragLayer(monitor => ({\n  item: monitor.getItem(),\n  itemType: monitor.getItemType(),\n  initialOffset: monitor.getInitialSourceClientOffset(),\n  currentOffset: monitor.getSourceClientOffset(),\n  isDragging: monitor.isDragging(),\n}))(SnippetDragLayer)\n","import { pathOr, map, keys, flatten, forEach } from 'ramda'\nimport useSWR from '@/hooks/useSWR'\nimport { QueryVariables, Mutation, MutationOptions } from '@/constants/types'\nimport { Doctor } from '@/services/pathology'\nimport { useRequest } from '@/utils/request'\nimport { mapIndexed } from '@/utils/webHelper'\nconst { compose } = require('ramda')\n\nexport type QueryResult = {\n  yearMonth: string\n  date: string\n  doctor: string\n  period: string\n}\n\nexport function useShifts({\n  lazy,\n  onCompleted,\n  onError,\n  ...variables\n}: QueryVariables = {}) {\n  const { data, ...rest } = useSWR<QueryResult[]>(\n    `/api/v1/d1/getDoctorShift/{date}`,\n    {\n      variables,\n      onCompleted,\n      onError,\n      lazy,\n    }\n  )\n\n  let shiftById: { [key: string]: QueryResult[] } = {}\n\n  compose(\n    forEach((x: QueryResult) => {\n      if (!shiftById[x.date]) {\n        shiftById[x.date] = [x]\n      } else {\n        shiftById[x.date].push(x)\n      }\n    }),\n    pathOr([], [])\n  )(data)\n\n  return {\n    ...rest,\n    shiftById,\n    data,\n  }\n}\n\nexport function useCreateOrUpdateShift(options: MutationOptions = {}) {\n  const { loading, mutate } = useRequest(`/api/v1/d1/createShift`, {\n    ...options,\n    method: 'POST',\n  })\n\n  const handler = (values: {\n    date: moment.Moment\n    doctorList: { [key: number]: any[] }\n  }) => {\n    let payload = compose(\n      flatten,\n      map((key: React.Key) =>\n        compose(\n          mapIndexed((x: Doctor, idx: number) => ({\n            date: +key,\n            year_month: values.date.format('YYYY-MM'),\n            period: idx === 0 ? '00:00~1200' : '12:00~24:00',\n            doctor: x.doctor,\n          })),\n          pathOr([], ['doctorList', key])\n        )(values)\n      ),\n      keys,\n      pathOr({}, ['doctorList'])\n    )(values)\n\n    return mutate(payload)\n  }\n\n  return [loading, handler] as Mutation\n}\n","export default {\n  CARD: 'CARD',\n}\n","import React from 'react'\nimport { DragSource, ConnectDragPreview, ConnectDragSource } from 'react-dnd'\nimport { getEmptyImage } from 'react-dnd-html5-backend'\nimport { Doctor } from '@/services/pathology'\nimport ItemTypes from './item-types'\n\ntype Props = {\n  item: Doctor\n  index?: number\n  style?: React.CSSProperties\n  className?: string\n  draggable?: boolean\n  isDragging?: boolean\n  connectDragPreview?: ConnectDragPreview\n  connectDragSource?: ConnectDragSource\n}\n\nconst withDragSource = DragSource(\n  ItemTypes.CARD,\n  {\n    beginDrag(props: Props) {\n      return {\n        ...props.item,\n      }\n    },\n    canDrag() {\n      return true\n    },\n  },\n  (connect, monitor) => ({\n    connectDragSource: connect.dragSource(),\n    connectDragPreview: connect.dragPreview(),\n    isDragging: monitor.isDragging(),\n  })\n)\n\nclass DoctorCard extends React.Component<Props> {\n  componentDidMount = () => {\n    const { connectDragPreview } = this.props\n    if (connectDragPreview) {\n      connectDragPreview(getEmptyImage() /* { anchorX: 0.2, anchorY: 0.1 } */)\n    }\n  }\n\n  render() {\n    const {\n      item,\n      className,\n      style,\n      connectDragSource = (node: any) => node,\n      connectDragPreview = (node: any) => node,\n      isDragging,\n    } = this.props\n\n    const _style = {\n      ...style,\n      border: `1px ${isDragging ? 'dashed' : 'solid'} #ddd`,\n    }\n\n    return connectDragSource(\n      connectDragPreview(\n        <div key={item.id} className={className} style={_style}>\n          醫師 {item.doctor}\n        </div>\n      )\n    )\n  }\n}\n\nexport default withDragSource(DoctorCard)\n","import React from 'react'\nimport cx from 'classnames'\nimport { CloseOutlined } from '@ant-design/icons'\nimport { DropTarget, ConnectDropTarget } from 'react-dnd'\nimport styled from 'styled-components'\nimport { lt, __, length, allPass, propEq, find, isNil } from 'ramda'\nimport { Doctor } from '@/services/pathology'\nimport ItemTypes from './item-types'\nconst { compose } = require('ramda')\n\ninterface Props {\n  draggingItem?: any\n  isOver?: boolean\n  index: number\n  canDrop?: boolean\n  doctors: any[]\n  className?: string\n  style?: React.CSSProperties\n  connectDropTarget: ConnectDropTarget\n  onDoctorDrop(data: any): void\n  onDoctorRemove(data: any): void\n}\n\nconst BlockPlaceHolder = styled.div.attrs({\n  className: 'px-6 py-4 block-placeholder',\n})`\n  display: flex;\n  align-items: center;\n  border: rgba(225, 225, 225, 0.9) 2px dashed;\n  background-color: transparent;\n`\n\nconst withDropTarget = DropTarget<Props>(\n  ItemTypes.CARD,\n  {\n    drop({ index }, monitor, component) {\n      const item = monitor.getItem()\n\n      component.handleDoctorDrop(item, index)\n    },\n    canDrop({ doctors }, monitor) {\n      const item = monitor.getItem()\n\n      return allPass([\n        compose(lt(__, 2), length),\n        compose(isNil, find(propEq('id', item.id))),\n      ])(doctors)\n    },\n  },\n  (connect, monitor) => ({\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n    canDrop: monitor.canDrop(),\n    didDrop: monitor.didDrop(),\n    draggingItem: monitor.getItem(),\n  })\n)\n\nclass ImageSchedulerCalendar extends React.Component<Props> {\n  handleDoctorDrop = (item: any, index: number) => {\n    this.props.onDoctorDrop({ ...item, index })\n  }\n\n  handleDoctorRemove = (x: any) => () => {\n    this.props.onDoctorRemove(x)\n  }\n\n  render() {\n    const {\n      connectDropTarget,\n      isOver,\n      canDrop,\n      doctors = [],\n      className,\n      style,\n    } = this.props\n\n    let itemHeight = `${100 / (doctors.length > 0 ? 2 : 1)}%`\n\n    return connectDropTarget(\n      <div\n        className={cx('w-full', className)}\n        style={{ height: '100%', ...style }}>\n        {doctors.map((x: Doctor) => (\n          <div\n            key={`scheduled-doctor-${x.id}`}\n            className=\"bg-login-cyan text-white flex items-center justify-center px-6 py-4 relative\"\n            css={{\n              height: itemHeight,\n              marginBottom: '0.1rem',\n            }}>\n            <div>\n              {x.doctor}\n              <CloseOutlined\n                onClick={this.handleDoctorRemove(x)}\n                style={{\n                  position: 'absolute',\n                  right: 5,\n                  top: 9,\n                  fontSize: 12,\n                  cursor: 'pointer',\n                }}\n              />\n            </div>\n          </div>\n        ))}\n        {isOver && canDrop && (\n          <BlockPlaceHolder style={{ height: itemHeight }} />\n        )}\n      </div>\n    )\n  }\n}\n\nexport default compose(withDropTarget)(ImageSchedulerCalendar)\n","import React from 'react'\nimport moment from 'moment'\nimport { Form, Row, Col, DatePicker, Spin, message } from 'antd'\nimport { invoker, identity, times, pathOr, forEach, map } from 'ramda'\nimport useTitle from '@/hooks/useTitle'\nimport { useBreadcrumb, useHeaderContent } from '@/hooks/useApp'\nimport useRouteLeaveConfirm from '@/hooks/useRouteLeaveConfirm'\nimport { Page } from '@/components/layout'\nimport Button from '@/components/button'\nimport DragLayer from '@/components/snippet-drag-layer'\nimport DndProvider from '@/components/snippet-scrollable-container'\nimport {\n  useShifts,\n  useCreateOrUpdateShift,\n  QueryResult,\n} from '@/services/shift'\nimport { useDoctors, Doctor } from '@/services/pathology'\nimport DraggableDoctorCard from './draggable-doctor-card'\nimport ImageSchedulerCalendar from './image-scheduler-calendar'\nconst { compose } = require('ramda')\n\nconst MonthPicker = DatePicker.MonthPicker\n\nexport default function ImageScheduler() {\n  useTitle('影像排班')\n\n  useBreadcrumb([{ name: '影像排班' }])\n\n  const handleConfirm = useRouteLeaveConfirm('/')\n\n  const [date, setDate] = React.useState(moment())\n\n  const [doctorList, setDoctorList] = React.useState<{ [key: string]: any[] }>(\n    {}\n  )\n\n  const { refetch, loading, called, revalidate } = useShifts({\n    date: date.format('YYYY-MM'),\n    lazy: true,\n    onCompleted: (data: QueryResult[]) => {\n      const shiftById: { [key: string]: QueryResult[] } = {}\n\n      compose(\n        forEach((x: QueryResult) => {\n          const data = { ...x, id: `${x.date}${x.period}`, index: x.date }\n\n          if (!shiftById[x.date]) {\n            shiftById[x.date] = [data]\n          } else {\n            shiftById[x.date].push(data)\n          }\n        }),\n        pathOr([], [])\n      )(data)\n\n      setDoctorList(shiftById)\n    },\n  })\n\n  const [validating, handleSave] = useCreateOrUpdateShift({\n    onCompleted: response => {\n      revalidate()\n      message.success('儲存成功')\n    },\n  })\n\n  const handleOk = () => {\n    handleSave({ date, doctorList })\n  }\n\n  useHeaderContent(\n    <div className=\"inline-flex\">\n      <Button\n        color=\"outline\"\n        className=\"ml-6 bg-transparent text-white border-white\"\n        onClick={handleOk}>\n        儲存\n      </Button>\n      <Button\n        color=\"outline\"\n        className=\"ml-6 bg-transparent text-white border-white\"\n        onClick={handleConfirm}>\n        放棄\n      </Button>\n    </div>\n  )\n\n  const { doctorEnums } = useDoctors()\n\n  const handleMonthChange = (value: moment.Moment | null) => {\n    if (value) {\n      setDate(value)\n    }\n  }\n\n  const handleSearch = () => {\n    refetch({ date: date.format('YYYY-MM') })\n  }\n\n  const handleDoctorDrop = ({ index, ...data }: any) => {\n    setDoctorList(prev => {\n      const list = pathOr([], [index])(prev)\n      return {\n        ...prev,\n        [index]: [...list, { index, ...data }],\n      }\n    })\n  }\n\n  const handleDoctorRemove = ({ index, ...data }: any) => {\n    setDoctorList(prev => {\n      const list = pathOr([], [index])(prev)\n      return {\n        ...prev,\n        [index]: list.filter((x: any) => x.id !== data.id),\n      }\n    })\n  }\n\n  let calendar: JSX.Element[] = []\n\n  compose(\n    forEach((idx: number) => {\n      calendar.push(\n        <Col key={`calendar-${idx}`} span={3}>\n          <div className=\"py-4 bg-gray-300 text-center\">\n            {date.month() + 1}/{idx + 1}\n          </div>\n          <div className=\"h-20 border border-gray-300\">\n            <ImageSchedulerCalendar\n              index={idx}\n              doctors={pathOr([], [idx])(doctorList)}\n              onDoctorDrop={handleDoctorDrop}\n              onDoctorRemove={handleDoctorRemove}\n            />\n          </div>\n        </Col>\n      )\n    }),\n    times(identity),\n    invoker(0, 'getDate')(),\n    invoker(0, 'toDate')()\n  )(date)\n\n  return (\n    <DndProvider>\n      <DragLayer />\n      <Spin spinning={loading || validating}>\n        <Page>\n          <Row className=\"mb-6\">\n            <Col span={24}>\n              <div className=\"rounded-xl p-4 bg-white\">\n                <Form layout=\"inline\" colon={false}>\n                  <Form.Item label=\"排班年月\">\n                    <MonthPicker\n                      allowClear={false}\n                      value={date}\n                      onChange={handleMonthChange}\n                    />\n                  </Form.Item>\n                  <Button\n                    color=\"primary\"\n                    className=\"ml-4\"\n                    onClick={handleSearch}>\n                    查詢\n                  </Button>\n                </Form>\n              </div>\n            </Col>\n          </Row>\n          {called && (\n            <>\n              <Row className=\"mb-6\">\n                <Col span={24}>\n                  <h2 className=\"text-base font-normal\">醫師列表</h2>\n                  <div className=\"bg-white rounded-xl p-4\">\n                    <Row gutter={8}>\n                      {map(\n                        (x: Doctor) => (\n                          <Col span={3} key={x.id}>\n                            <DraggableDoctorCard\n                              draggable\n                              item={x}\n                              className=\"bg-login-cyan text-white flex items-center justify-center px-6 py-4 mb-2 cursor-move\"\n                            />\n                          </Col>\n                        ),\n                        doctorEnums\n                      )}\n                    </Row>\n                  </div>\n                </Col>\n              </Row>\n              <Row>\n                <Col span={24}>\n                  <h2 className=\"text-base font-normal\">排班列表</h2>\n                  <div className=\"bg-white rounded-xl p-4\">\n                    <Row>{calendar}</Row>\n                  </div>\n                </Col>\n              </Row>\n            </>\n          )}\n        </Page>\n      </Spin>\n    </DndProvider>\n  )\n}\n"],"sourceRoot":""}