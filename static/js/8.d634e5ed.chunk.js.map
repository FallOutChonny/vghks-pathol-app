{"version":3,"sources":["components/snippet-preview-modal.tsx","components/snippet-drag-preview.js","components/snippet-drag-layer.tsx","hooks/useConfirm.tsx","../node_modules/@ant-design/icons-svg/es/asn/MinusOutlined.js","../node_modules/@ant-design/icons/es/icons/MinusOutlined.js","containers/report-template-editor/report-template-builder.tsx"],"names":["compose","require","SnippetPreviewWrapper","styled","div","SnippetPreviewModal","item","onCancel","useForm","form","useReportTemplate","id","name","snippetList","loading","visible","style","top","maskClosable","className","keyboard","width","footer","key","color","onClick","spinning","is","Array","renderSnippets","map","gt","__","length","pathOr","background","theme","darkGrey","keys","SnippetDragPreview","React","Component","layerStyles","position","pointerEvents","zIndex","left","height","getItemStyles","props","initialOffset","currentOffset","display","x","y","transform","WebkitTransform","DragLayer","monitor","getItem","itemType","getItemType","getInitialSourceClientOffset","getSourceClientOffset","isDragging","element","document","elementFromPoint","canDrop","canMoveSnippet","ItemTypes","BOARD","SNIPPET","renderItem","modal","confirm","Modal","useConfirm","content","dataSource","onOk","onBeforeOpen","refetchQueries","modalProps","onCompleted","onCompletedResolve","useRef","handleConfirm","evt","_item","find","path","currentTarget","dataset","modalDefaultProps","okText","update","okButtonProps","minWidth","marginRight","Promise","resolve","current","MinusOutlined","ref","AntdIcon","Object","assign","icon","MinusOutlinedSvg","displayName","whiteSpace","ReportTemplateBuilder","useTitle","useBreadcrumb","params","match","category","reportTemplate","handleTabChange","handleTabEdit","handleTabMove","handleTabNameChange","handleSnippetUpdate","useEffect","setFieldsValue","JSON","stringify","useReportPreview","isPreview","handlePreview","useCreateTemplate","response","history","push","replace","data","REPORT_TEMPLATE_EDIT","success","creating","handleAdd","useUpdateTemplate","updating","handleUpdate","destroy","onError","handlePublicFailure","_handlePublic","templateName","status","reportTemplateStatusEnums","FINISH","handlePublic","handleLeaveConfirm","useRouteLeaveConfirm","REPORT_TEMPLATE_LIST","handleExport","useExportTemplate","filename","setting","useHeaderContent","validateFields","then","values","handler","rest","mergeAll","categoryName","initialValues","gutter","span","defaultActiveKey","expandIconPosition","expandIcon","isActive","Panel","header","Item","noStyle","rules","required","type","activeKey","onChange","onEdit","moveTabNode","TabPane","closable","tab","contentEditable","suppressContentEditableWarning","spellCheck","draggable","onSnippetUpdate"],"mappings":"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","file":"static/js/8.d634e5ed.chunk.js","sourcesContent":["import React from 'react'\nimport { Form, Spin } from 'antd'\nimport { ModalProps } from 'antd/lib/modal'\nimport styled from 'styled-components'\nimport { length, __, gt, keys, map, pathOr, is } from 'ramda'\nimport { ReportTemplate, PhraseTemplate } from '@/constants/types'\nimport { useReportTemplate } from '@/services/report-template'\nimport Modal from '@/components/modal'\nimport { renderSnippets } from '@/components/snippet-utils'\nimport Button from '@/components/button'\nimport theme from '../theme'\nconst { compose } = require('ramda')\n\ninterface Props extends ModalProps {\n  item?: ReportTemplate | PhraseTemplate | null\n}\n\nconst SnippetPreviewWrapper = styled.div`\n  .ant-card-head {\n    min-height: auto;\n  }\n\n  .ant-card-head-title {\n    padding-top: 0;\n  }\n\n  .ant-card-body {\n    padding-top: 12px;\n    padding-bottom: 8px;\n  }\n`\n\nexport default function SnippetPreviewModal({ item, onCancel }: Props) {\n  const [form] = Form.useForm()\n\n  // const snippetList = pathOr({}, ['setting'], item)\n\n  const { snippetList, loading } = useReportTemplate({ id: item?.name })\n\n  return (\n    <Modal\n      visible\n      style={{ top: 30 }}\n      maskClosable={false}\n      className=\"ant-modal-header--border-none\"\n      keyboard={false}\n      width=\"65%\"\n      onCancel={onCancel}\n      footer={[\n        <Button key=\"btn-cancel\" color=\"outline\" onClick={onCancel}>\n          確認\n        </Button>,\n      ]}>\n      <Spin spinning={loading}>\n        <Form form={form}>\n          <SnippetPreviewWrapper>\n            {is(Array, snippetList)\n              ? renderSnippets()(snippetList as any)\n              : compose(\n                  map((key: string) => (\n                    <div key={key}>\n                      {compose(\n                        gt(__, 0),\n                        length,\n                        pathOr([], [key])\n                      )(snippetList) && (\n                        <h2\n                          style={{ background: theme.darkGrey, width: '50%' }}\n                          className=\"bg-darkGrey text-white pl-3 my-2\">\n                          {key}\n                        </h2>\n                      )}\n                      {compose(\n                        renderSnippets(),\n                        pathOr([], [key])\n                      )(snippetList)}\n                    </div>\n                  )),\n                  keys\n                )(snippetList)}\n          </SnippetPreviewWrapper>\n        </Form>\n      </Spin>\n    </Modal>\n  )\n}\n","import React from 'react'\n// import { envStore } from '@/constants/env'\n\nexport default class SnippetDragPreview extends React.Component {\n  render() {\n    // const dropType = this.props.canDrop ? 'allow' : 'forbid'\n    // const url = `${envStore.publicUrl}/images/icon-drag-${dropType}-drop@2x.png`\n\n    return <div>{/* <img width={160} src={url} alt={url} /> */}</div>\n  }\n}\n","import React from 'react'\nimport { XYCoord, DragLayer } from 'react-dnd'\nimport { Identifier } from 'dnd-core'\nimport ItemTypes from '@/constants/item-types'\nimport SnippetDragPreview from '@/components/snippet-drag-preview'\nimport { canMoveSnippet } from './snippet-utils'\n\nconst layerStyles: React.CSSProperties = {\n  position: 'fixed',\n  pointerEvents: 'none',\n  zIndex: 100,\n  left: 0,\n  top: 0,\n  width: '100%',\n  height: '100%',\n}\n\ninterface DragLayerProps {\n  item?: any\n  itemType?: Identifier | null\n  initialOffset?: XYCoord | null\n  currentOffset?: XYCoord | null\n  isDragging?: boolean\n}\n\nfunction getItemStyles(props: DragLayerProps) {\n  const { initialOffset, currentOffset } = props\n\n  if (!initialOffset || !currentOffset) {\n    return {\n      display: 'none',\n    }\n  }\n\n  const { x, y } = currentOffset\n\n  const transform = `translate(${x}px, ${y}px)`\n  return {\n    transform,\n    WebkitTransform: transform,\n  }\n}\n\nconst SnippetDragLayer: React.FC<DragLayerProps> = props => {\n  const { itemType, isDragging, currentOffset } = props\n\n  function renderItem({ canDrop }: { canDrop: boolean }) {\n    switch (itemType) {\n      case ItemTypes.BOARD:\n      case ItemTypes.SNIPPET:\n        return <SnippetDragPreview canDrop={canDrop} />\n      default:\n        return null\n    }\n  }\n\n  if (!isDragging) {\n    return null\n  }\n\n  if (!currentOffset) {\n    return null\n  }\n\n  const element = document.elementFromPoint(currentOffset.x, currentOffset.y)\n\n  let canDrop = false\n  if (element) {\n    canDrop = canMoveSnippet(element)\n  }\n\n  return (\n    <div className=\"report-template-builder__drag-layer\" style={layerStyles}>\n      <div style={getItemStyles(props)}>{renderItem({ canDrop })}</div>\n    </div>\n  )\n}\n\nexport default DragLayer(monitor => ({\n  item: monitor.getItem(),\n  itemType: monitor.getItemType(),\n  initialOffset: monitor.getInitialSourceClientOffset(),\n  currentOffset: monitor.getSourceClientOffset(),\n  isDragging: monitor.isDragging(),\n}))(SnippetDragLayer)\n","import React from 'react'\nimport { ModalProps, ModalFuncProps } from 'antd/lib/modal'\nimport { find, path, pathOr } from 'ramda'\nimport Modal from '@/components/modal'\nimport { modalDefaultProps } from '@/utils/message'\nconst { compose } = require('ramda')\n\nexport const confirm = Modal.confirm\n\ntype Props<T> = {\n  /**\n   * 確認視窗的文字內容\n   */\n  content?: string | React.ReactNode\n  /**\n   * 確認後執行的行為，例如打 API\n   */\n  onOk?: (values?: any, resolve?: (values?: any) => any) => any\n  /**\n   * 跳出確認時可以做的事情，例如關掉正在編輯的對話框\n   */\n  onBeforeOpen?: () => any\n  /**\n   * 成功後，可重新取得(列表)資料\n   */\n  refetchQueries?: () => any\n  /**\n   * 取消後做的事情，例如重新打開編輯對話窗\n   */\n  onCancel?: () => any\n  /**\n   * 列表資料，可在跳確認窗時從裡面查找要確認修改的資料並回傳\n   */\n  dataSource?: T[]\n  /**\n   * 項目，可以是單一物件或陣列物件...\n   */\n  item?: any\n  /**\n   * 自訂確認視窗屬性\n   */\n  modalProps?: ModalProps\n  /**\n   * 成功後可作的事情\n   */\n  onCompleted?: () => any\n}\n\nexport let modal: {\n  destroy: () => void\n  update: (newConfig: ModalFuncProps) => void\n}\n\nexport function useConfirm<T extends any>(props: Props<T>) {\n  const {\n    content,\n    dataSource = [],\n    onOk,\n    onBeforeOpen,\n    refetchQueries,\n    onCancel,\n    item,\n    modalProps = {},\n    onCompleted,\n  } = props\n\n  let onCompletedResolve = React.useRef(() => ({}))\n\n  const handleToggleConfirm = (evt: React.MouseEvent<HTMLElement>) => {\n    if (onBeforeOpen) {\n      onBeforeOpen()\n    }\n    handleConfirm(evt)\n  }\n\n  const handleFailure = () => {\n    if (modal) {\n      modal.update({\n        okButtonProps: {\n          className: 'c-btn c-btn--danger',\n          style: { minWidth: 96, marginRight: 16 },\n          loading: false,\n        },\n      })\n    }\n  }\n\n  const handleConfirm = (evt: React.MouseEvent<HTMLElement>) => {\n    const _item = compose(\n      pathOr(item, []),\n      find<any>(\n        x =>\n          `${path(['id'], x)}` ===\n          (evt.currentTarget as HTMLElement).dataset['id']\n      )\n    )(dataSource)\n\n    modal = confirm({\n      ...modalDefaultProps(content, modalProps),\n      okText: '確認',\n      onOk() {\n        if (modal) {\n          modal.update({\n            okButtonProps: {\n              className: 'c-btn c-btn--danger',\n              style: { minWidth: 80, marginRight: 24 },\n              loading: true,\n            },\n          })\n        }\n\n        return new Promise(resolve => {\n          if (onOk) {\n            onOk(_item)\n          }\n\n          if (onCompleted) {\n            onCompleted()\n          }\n\n          onCompletedResolve.current = (() => {\n            resolve()\n            if (refetchQueries) {\n              refetchQueries()\n            }\n          }) as any\n        })\n      },\n      onCancel() {\n        if (onCancel) {\n          onCancel()\n        }\n      },\n    })\n  }\n\n  return [handleToggleConfirm, handleFailure] as [\n    (evt: React.MouseEvent<HTMLElement>) => void,\n    () => void\n  ]\n}\n\nexport default useConfirm\n","// This icon file is generated automatically.\nvar MinusOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M872 474H152c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h720c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8z\" } }] }, \"name\": \"minus\", \"theme\": \"outlined\" };\nexport default MinusOutlined;\n","// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport MinusOutlinedSvg from \"@ant-design/icons-svg/es/asn/MinusOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar MinusOutlined = function MinusOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, Object.assign({}, props, {\n    ref: ref,\n    icon: MinusOutlinedSvg\n  }));\n};\n\nMinusOutlined.displayName = 'MinusOutlined';\nexport default /*#__PURE__*/React.forwardRef(MinusOutlined);","import React from 'react'\nimport { Row, Col, Form, message, Spin } from 'antd'\nimport { PlusOutlined, MinusOutlined } from '@ant-design/icons'\nimport { RouteComponentProps } from 'react-router-dom'\nimport { keys, map, mergeAll, pathOr, replace } from 'ramda'\nimport { Page } from '@/components/layout'\nimport Button from '@/components/button'\nimport Input from '@/components/input'\nimport useRouteLeaveConfirm from '@/hooks/useRouteLeaveConfirm'\nimport useTitle from '@/hooks/useTitle'\nimport { useBreadcrumb, useHeaderContent } from '@/hooks/useApp'\nimport useConfirm, { modal } from '@/hooks/useConfirm'\nimport Tabs from '@/components/draggable-tabs'\nimport ReactDndProvider from '@/components/snippet-scrollable-container'\nimport SnippetListMenu from '@/components/snippet-list-menu'\nimport SnippetDragLayer from '@/components/snippet-drag-layer'\nimport SnippetsContainer from '@/components/snippets-container'\nimport SnippetPreviewModal from '@/components/snippet-preview-modal'\nimport Collapse from '@/components/collapse'\nimport {\n  useReportTemplate,\n  useCreateTemplate,\n  useUpdateTemplate,\n  useExportTemplate,\n  useReportPreview,\n} from '@/services/report-template'\nimport history from '@/utils/history'\nimport { rules } from '@/utils/form'\nimport { REPORT_TEMPLATE_EDIT, REPORT_TEMPLATE_LIST } from '@/constants/routes'\nimport { reportTemplateStatusEnums } from '@/constants/enums'\nconst { compose } = require('ramda')\n\ninterface Props extends RouteComponentProps<{ id: string }> {}\n\nfunction ReportTemplateBuilder(props: Props) {\n  useTitle('結構式報告模版')\n\n  useBreadcrumb([{ name: '報告模版' }, { name: '結構式報告模版' }])\n\n  const { params } = props.match\n\n  const {\n    loading,\n    category,\n    reportTemplate,\n    snippetList,\n    handleTabChange,\n    handleTabEdit,\n    handleTabMove,\n    handleTabNameChange,\n    handleSnippetUpdate,\n  } = useReportTemplate({ id: params.id })\n\n  React.useEffect(() => {\n    form.setFieldsValue(reportTemplate)\n  }, [JSON.stringify(reportTemplate)]) // eslint-disable-line\n\n  const [isPreview, handlePreview] = useReportPreview()\n\n  const [form] = Form.useForm()\n\n  const [creating, handleAdd] = useCreateTemplate({\n    onCompleted: response => {\n      history.push(replace(':id', response?.data.name)(REPORT_TEMPLATE_EDIT))\n      message.success('報告模版已建立成功')\n    },\n  })\n\n  const [updating, handleUpdate] = useUpdateTemplate({\n    onCompleted: response => {\n      history.push(replace(':id', response?.data.name)(REPORT_TEMPLATE_EDIT))\n      message.success('報告模版已儲存成功')\n    },\n  })\n\n  const [, _handlePublic] = useUpdateTemplate({\n    onCompleted: response => {\n      message.success('報告模版已發佈成功')\n\n      if (modal) {\n        modal.destroy()\n      }\n    },\n    onError: () => {\n      if (modal) {\n        handlePublicFailure()\n      }\n    },\n  })\n\n  const handleSave = () => {\n    form.validateFields().then(values => {\n      let handler = reportTemplate?.id ? handleUpdate : handleAdd\n\n      const { data, ...rest } = values\n\n      handler({\n        ...reportTemplate,\n        ...rest,\n        setting: compose(\n          mergeAll,\n          map((key: string) => ({\n            [key]: compose(\n              map(({ Component, icon, ...x }) => ({\n                ...x,\n                categoryName: key,\n              })),\n              pathOr([], [key])\n            )(snippetList),\n          })),\n          keys\n        )(snippetList),\n      })\n    })\n  }\n\n  const [handlePublic, handlePublicFailure] = useConfirm({\n    content: `發佈後模版將可以在報告中使用，確認要發佈嗎？`,\n    onOk: () =>\n      _handlePublic({\n        ...reportTemplate,\n        templateName: reportTemplate.name,\n        status: reportTemplateStatusEnums.FINISH,\n      }),\n  })\n\n  const handleLeaveConfirm = useRouteLeaveConfirm(REPORT_TEMPLATE_LIST)\n\n  const handleExport = useExportTemplate({\n    filename: '報告模版',\n    data: { ...reportTemplate, setting: snippetList },\n  })\n\n  useHeaderContent(\n    <div className=\"inline-flex\">\n      <Button\n        color=\"outline\"\n        className=\"ml-6 bg-transparent text-white border-white\"\n        onClick={handlePublic}>\n        發佈\n      </Button>\n      <Button\n        color=\"outline\"\n        className=\"ml-6 bg-transparent text-white border-white\"\n        onClick={handleSave}>\n        儲存\n      </Button>\n      <Button\n        color=\"outline\"\n        className=\"ml-6 bg-transparent text-white border-white\"\n        onClick={handleLeaveConfirm}>\n        取消\n      </Button>\n      <Button\n        color=\"outline\"\n        className=\"ml-6 bg-transparent text-white border-white\"\n        onClick={handleExport}>\n        匯出\n      </Button>\n      <Button\n        color=\"outline\"\n        className=\"ml-6 bg-transparent text-white border-white\"\n        onClick={handlePreview}>\n        預覽\n      </Button>\n    </div>\n  )\n\n  return (\n    <ReactDndProvider>\n      {isPreview && (\n        <SnippetPreviewModal\n          item={{ ...reportTemplate, setting: snippetList }}\n          onCancel={handlePreview}\n        />\n      )}\n      <SnippetDragLayer />\n      <Spin spinning={!!(creating || updating || loading)}>\n        <Page>\n          <Form form={form} initialValues={{ ...reportTemplate }}>\n            <Row gutter={48} className=\"pt-2 relative\">\n              <Col span={5}>\n                <Collapse\n                  defaultActiveKey={[1, 2]}\n                  expandIconPosition=\"right\"\n                  className=\"shadow-2xl header-pl-clear\"\n                  expandIcon={({ isActive }) =>\n                    isActive ? <MinusOutlined /> : <PlusOutlined />\n                  }>\n                  <Collapse.Panel header=\"模版資訊\" key={1}>\n                    <Row className=\"mb-2 text-sm text-darkGrey\">\n                      <Col span={24} className=\"mb-3\">\n                        <div className=\"inline-block\" css={{ width: 60 }}>\n                          名稱:\n                        </div>\n                        <Form.Item noStyle name=\"name\" rules={[rules.required]}>\n                          <Input className=\"w-2/3\" />\n                        </Form.Item>\n                      </Col>\n                      <Col span={24} className=\"my-3\">\n                        <div className=\"inline-block\" css={{ width: 60 }}>\n                          描述:\n                        </div>\n                        <Form.Item noStyle name=\"description\">\n                          <Input className=\"w-2/3\" />\n                        </Form.Item>\n                      </Col>\n                      <Col span={24} className=\"my-3\">\n                        <div className=\"inline-block\" css={{ width: 60 }}>\n                          創作者:\n                        </div>\n                        <Form.Item\n                          noStyle\n                          name=\"author\"\n                          rules={[rules.required]}>\n                          <Input className=\"w-2/3\" />\n                        </Form.Item>\n                      </Col>\n                    </Row>\n                  </Collapse.Panel>\n                  <Collapse.Panel header=\"工具列\" key={2}>\n                    <Row>\n                      <Col span={24}>\n                        <SnippetListMenu />\n                      </Col>\n                    </Row>\n                  </Collapse.Panel>\n                </Collapse>\n              </Col>\n              <Tabs\n                type=\"editable-card\"\n                activeKey={category}\n                onChange={handleTabChange}\n                onEdit={handleTabEdit}\n                moveTabNode={handleTabMove}\n                className=\"flex-1\">\n                {compose(\n                  map((key: string) => (\n                    <Tabs.TabPane\n                      closable\n                      key={key}\n                      tab={\n                        <span\n                          contentEditable\n                          suppressContentEditableWarning\n                          spellCheck={false}\n                          className=\"outline-none\"\n                          css={{ whiteSpace: 'nowrap' }}\n                          onChange={handleTabNameChange(key)}\n                          // onBlur={handleTabNameChange(key)}\n                        >\n                          {key}\n                        </span>\n                      }>\n                      <Col\n                        span={19}\n                        className=\"report-template-builder__main-content\">\n                        <SnippetsContainer\n                          draggable={!isPreview}\n                          snippetList={snippetList[key]}\n                          onSnippetUpdate={handleSnippetUpdate}\n                        />\n                      </Col>\n                    </Tabs.TabPane>\n                  )),\n                  keys\n                )(snippetList)}\n              </Tabs>\n            </Row>\n          </Form>\n        </Page>\n      </Spin>\n    </ReactDndProvider>\n  )\n}\n\nexport default ReportTemplateBuilder\n"],"sourceRoot":""}