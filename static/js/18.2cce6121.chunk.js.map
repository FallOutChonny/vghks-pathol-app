{"version":3,"sources":["services/pathology.tsx","containers/report-inquiry/report-inquiry.tsx"],"names":["require","compose","useDoctors","division","Divisions","PATH","variables","useSWR","data","rest","_data","map","x","id","doctorId","doctorById","forEach","s","doctorEnums","DoctorSelect","props","Option","key","value","doctor","BodyPartSelect","uuid","name","useBodyParts","BedroomSelect","useBedrooms","AppointmentTypeSelect","useAppointmentTypes","FormItem","styled","Item","ReportInquiry","useTitle","useBreadcrumb","React","useEffect","handleKeyPress","evt","handleOk","window","addEventListener","removeEventListener","orreqno","queryString","useLocation","search","form","setFieldsValue","user","useAuth","handleConfirm","useRouteLeaveConfirm","useForm","loading","validateFields","then","values","history","push","REPORT_INPUT","toQueryString","useHeaderContent","color","className","onClick","spinning","style","minHeight","justify","span","layout","hideRequiredMark","colon","label","rules","required","initialValue","allowClear","bordered","size","placeholder","width"],"mappings":"oZAUoBA,EAAQ,IAApBC,QA2BD,SAASC,IAGS,IAAD,yDAAJ,GAAI,IAFtBC,gBAEsB,MAFXC,IAAUC,KAEC,EADnBC,EACmB,8BACSC,YAC7B,wCACA,CACED,UAAU,aAAGH,YAAaG,KAJR,IACdE,YADc,MACP,GADO,EACAC,EADA,wBAQhBC,EAAK,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAMG,KAAI,SAAAC,GAAC,kCAAUA,GAAV,IAAaC,GAAID,EAAEE,cAEtCC,EAAqC,GAI3C,OAFAC,aAAQ,SAAAC,GAAC,OAAKF,EAAWE,EAAEH,UAAYG,IAAIP,GAEpC,2BACFD,GADL,IAEEM,aACAP,KAAME,EACNQ,YAAaR,IAIV,SAASS,EAAaC,GAA0B,IAC7CZ,EAASN,IAATM,KACR,OACE,kBAAC,IAAWY,EACTZ,EAAKG,KAAI,SAAAC,GAAC,OACT,kBAAC,IAAOS,OAAR,CAAeC,IAAKV,EAAEC,GAAIU,MAAOX,EAAEY,QAChCZ,EAAEY,YAkBN,SAASC,EAAeL,GAA0B,IAC/CZ,EAZH,WAAyB,IAAD,EACED,YAAiB,2BADnB,IACrBC,YADqB,MACd,GADc,EACPC,EADO,wBAGvBC,EAAK,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAMG,KAAI,SAAAC,GAAC,MAAK,CAAEC,GAAIa,cAAQC,KAAMf,MAElD,OAAO,2BACFH,GADL,IAEED,KAAME,IAKSkB,GAATpB,KACR,OACE,kBAAC,IAAWY,EACTZ,EAAKG,KAAI,SAAAC,GAAC,OACT,kBAAC,IAAOS,OAAR,CAAeC,IAAKV,EAAEC,GAAIU,MAAOX,EAAEe,MAChCf,EAAEe,UAkBN,SAASE,EAAcT,GAA0B,IAC9CZ,EAZH,WAAwB,IAAD,EACGD,YAAiB,uBADpB,IACpBC,YADoB,MACb,GADa,EACNC,EADM,wBAGtBC,EAAK,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAMG,KAAI,SAAAC,GAAC,MAAK,CAAEC,GAAIa,cAAQC,KAAMf,MAElD,OAAO,2BACFH,GADL,IAEED,KAAME,IAKSoB,GAATtB,KACR,OACE,kBAAC,IAAWY,EACTZ,EAAKG,KAAI,SAAAC,GAAC,OACT,kBAAC,IAAOS,OAAR,CAAeC,IAAKV,EAAEC,GAAIU,MAAOX,EAAEe,MAChCf,EAAEe,UAoBN,SAASI,EAAsBX,GAA0B,IACtDZ,EAdH,WAAgC,IAAD,EACLD,YAC7B,kCAFkC,IAC5BC,YAD4B,MACrB,GADqB,EACdC,EADc,wBAK9BC,EAAK,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAMG,KAAI,SAAAC,GAAC,MAAK,CAAEC,GAAIa,cAAQC,KAAMf,MAElD,OAAO,2BACFH,GADL,IAEED,KAAME,IAKSsB,GAATxB,KACR,OACE,kBAAC,IAAWY,EACTZ,EAAKG,KAAI,SAAAC,GAAC,OACT,kBAAC,IAAOS,OAAR,CAAeC,IAAKV,EAAEC,GAAIU,MAAOX,EAAEe,MAChCf,EAAEe,Y,0VC3HPM,EAAWC,kBAAO,IAAKC,MAAf,2EAAGD,CAAH,MAEC,SAASE,IACtBC,YAAS,4BAETC,YAAc,CAAC,CAAEX,KAAM,8BAEvBY,IAAMC,WAAU,WACd,IAAMC,EAAiB,SAACC,GAClB,UAAAA,EAAIpB,KACNqB,KAMJ,OAFAC,OAAOC,iBAAiB,UAAWJ,GAE5B,WACLG,OAAOE,oBAAoB,UAAWL,MAEvC,IAjBmC,IAmB9BM,EAAYC,YAAYC,cAAcC,QAAtCH,QAERR,IAAMC,WAAU,WACVO,GACFI,EAAKC,eAAe,CAAEL,cAEvB,CAACA,IAzBkC,IA2B9BM,EAASC,cAATD,KAEFE,EAAgBC,YAAqB,KA7BL,EA+BvB,IAAKC,UAAbN,EA/B+B,oBAiC9BO,EAAYxD,cAAZwD,QAEFf,EAAW,WACfQ,EAAKQ,iBAAiBC,MAAK,SAAAC,GACzBC,IAAQC,KAAR,UAAgBC,IAAhB,YAAgCC,YAAcJ,SAqBlD,OAjBAK,YACE,6BACE,kBAAC,IAAD,CACEC,MAAM,UACNC,UAAU,yCACVC,QAAS1B,GAHX,gBAMA,kBAAC,IAAD,CACEwB,MAAM,UACNC,UAAU,8CACVC,QAASd,GAHX,kBAUF,oCACE,uBAAMe,SAAUZ,GACd,kBAAC,IAAD,CAAMa,MAAO,CAAEC,UAAW,wBACxB,uBAAKC,QAAQ,UACX,uBAAKC,KAAM,IACT,yBAAKN,UAAU,iDACb,uBACEjB,KAAMA,EACNwB,OAAO,SACPP,UAAU,sBACVQ,kBAAkB,EAClBC,OAAO,GACP,kBAAC5C,EAAD,CACEmC,UAAU,UACVU,MAAM,2BACNC,MAAO,CAACA,IAAMC,UACdC,aAAc5B,EAAK1B,KACnBA,KAAK,UACL,kBAAC,IAAD,CACEuD,YAAU,EACVC,UAAU,EACVC,KAAK,QACLC,YAAY,2BACZd,MAAO,CAAEe,MAAO,QAGpB,kBAACrD,EAAD,CACE6C,MAAM,2BACNC,MAAO,CAACA,IAAMC,UACdrD,KAAK,WACL,kBAAC,IAAD,CACEyD,KAAK,QACLD,UAAU,EACVE,YAAY,uCACZd,MAAO,CAAEe,MAAO,QAGpB,kBAACrD,EAAD,CACE8C,MAAO,CAACA,IAAMC,UACdrD,KAAK,eACLmD,MAAM,4BACN,kBAAC,IAAD,CACEO,YAAY,uCACZD,KAAK,QACLb,MAAO,CAAEe,MAAO,SAItB,yBAAKlB,UAAU","file":"static/js/18.2cce6121.chunk.js","sourcesContent":["import React from 'react'\nimport { SelectProps } from 'antd/lib/select'\nimport useSwr from 'swr'\nimport { pathOr, head, forEach } from 'ramda'\nimport request from '@/utils/request'\nimport useSWR from '@/hooks/useSWR'\nimport Select from '@/components/select'\nimport { QueryVariables, MedicalOrder } from '@/constants/types'\nimport { uuid } from '@/utils/webHelper'\nimport { Divisions } from '@/constants/enums'\nconst { compose } = require('ramda')\n\nexport type Doctor = {\n  id: number\n  doctorId: number\n  doctor: string\n  division: Divisions\n}\n\nexport function usePathology() {\n  const { data, ...others } = useSwr(`/api/b2/getPathologyResult`, url =>\n    request(url, {\n      method: 'POST',\n      body: {\n        classification: 'pathorderview',\n        noType: 'HHISNUM',\n        no: '16685033',\n      },\n    })\n  )\n\n  return {\n    ...others,\n    data: compose(head, pathOr([], []))(data) as MedicalOrder,\n  }\n}\n\nexport function useDoctors({\n  division = Divisions.PATH,\n  ...variables\n}: QueryVariables = {}) {\n  const { data = [], ...rest } = useSWR<Doctor[]>(\n    '/api/v1/c2/getC2DoctorList/{division}',\n    {\n      variables: { division, ...variables },\n    }\n  )\n\n  const _data = data?.map(x => ({ ...x, id: x.doctorId }))\n\n  const doctorById: { [key: string]: any } = {}\n\n  forEach(s => (doctorById[s.doctorId] = s), _data)\n\n  return {\n    ...rest,\n    doctorById,\n    data: _data,\n    doctorEnums: _data,\n  }\n}\n\nexport function DoctorSelect(props: SelectProps<any>) {\n  const { data } = useDoctors()\n  return (\n    <Select {...props}>\n      {data.map(x => (\n        <Select.Option key={x.id} value={x.doctor}>\n          {x.doctor}\n        </Select.Option>\n      ))}\n    </Select>\n  )\n}\n\nexport function useBodyParts() {\n  const { data = [], ...rest } = useSWR<string[]>('/api/v1/b1/getBodyParts')\n\n  const _data = data?.map(x => ({ id: uuid(), name: x }))\n\n  return {\n    ...rest,\n    data: _data,\n  }\n}\n\nexport function BodyPartSelect(props: SelectProps<any>) {\n  const { data } = useBodyParts()\n  return (\n    <Select {...props}>\n      {data.map(x => (\n        <Select.Option key={x.id} value={x.name}>\n          {x.name}\n        </Select.Option>\n      ))}\n    </Select>\n  )\n}\n\nexport function useBedrooms() {\n  const { data = [], ...rest } = useSWR<string[]>('/api/v1/b1/getWards')\n\n  const _data = data?.map(x => ({ id: uuid(), name: x }))\n\n  return {\n    ...rest,\n    data: _data,\n  }\n}\n\nexport function BedroomSelect(props: SelectProps<any>) {\n  const { data } = useBedrooms()\n  return (\n    <Select {...props}>\n      {data.map(x => (\n        <Select.Option key={x.id} value={x.name}>\n          {x.name}\n        </Select.Option>\n      ))}\n    </Select>\n  )\n}\n\nexport function useAppointmentTypes() {\n  const { data = [], ...rest } = useSWR<string[]>(\n    '/api/v1/b1/getAppointmentTypes'\n  )\n\n  const _data = data?.map(x => ({ id: uuid(), name: x }))\n\n  return {\n    ...rest,\n    data: _data,\n  }\n}\n\nexport function AppointmentTypeSelect(props: SelectProps<any>) {\n  const { data } = useAppointmentTypes()\n  return (\n    <Select {...props}>\n      {data.map(x => (\n        <Select.Option key={x.id} value={x.name}>\n          {x.name}\n        </Select.Option>\n      ))}\n    </Select>\n  )\n}\n","import React from 'react'\nimport { useLocation } from 'react-router-dom'\nimport { Row, Col, Form, Spin } from 'antd'\nimport styled from 'styled-components'\nimport useTitle from '@/hooks/useTitle'\nimport { useBreadcrumb, useHeaderContent } from '@/hooks/useApp'\nimport useRouteLeaveConfirm from '@/hooks/useRouteLeaveConfirm'\nimport useAuth from '@/hooks/useAuth'\nimport { ReportTemplateSelect } from '@/services/report-template'\nimport { DoctorSelect, useDoctors } from '@/services/pathology'\nimport Input from '@/components/input'\nimport { Page } from '@/components/layout'\nimport Button from '@/components/button'\nimport { rules } from '@/utils/form'\nimport history from '@/utils/history'\nimport { toQueryString } from '@/utils/request'\nimport { queryString } from '@/utils/webHelper'\nimport { REPORT_INPUT } from '@/constants/routes'\n\nconst FormItem = styled(Form.Item)``\n\nexport default function ReportInquiry() {\n  useTitle('輸入報告')\n\n  useBreadcrumb([{ name: '輸入報告' }])\n\n  React.useEffect(() => {\n    const handleKeyPress = (evt: KeyboardEvent) => {\n      if (evt.key === `Enter`) {\n        handleOk()\n      }\n    }\n\n    window.addEventListener('keydown', handleKeyPress)\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress)\n    }\n  }, []) // eslint-disable-line\n\n  const { orreqno } = queryString(useLocation().search)\n\n  React.useEffect(() => {\n    if (orreqno) {\n      form.setFieldsValue({ orreqno })\n    }\n  }, [orreqno]) // eslint-disable-line\n\n  const { user } = useAuth()\n\n  const handleConfirm = useRouteLeaveConfirm('/')\n\n  const [form] = Form.useForm()\n\n  const { loading } = useDoctors()\n\n  const handleOk = () => {\n    form.validateFields().then(values => {\n      history.push(`${REPORT_INPUT}?${toQueryString(values)}`)\n    })\n  }\n\n  useHeaderContent(\n    <div>\n      <Button\n        color=\"oultine\"\n        className=\"text-white border-white bg-transparent\"\n        onClick={handleOk}>\n        確認\n      </Button>\n      <Button\n        color=\"outline\"\n        className=\"ml-3 text-white border-white bg-transparent\"\n        onClick={handleConfirm}>\n        取消\n      </Button>\n    </div>\n  )\n\n  return (\n    <>\n      <Spin spinning={loading}>\n        <Page style={{ minHeight: 'calc(100vh - 203px)' }}>\n          <Row justify=\"center\">\n            <Col span={20}>\n              <div className=\"bg-white p-12 py-24 mb-8 rounded-lg shadow-lg\">\n                <Form\n                  form={form}\n                  layout=\"inline\"\n                  className=\"flex justify-center\"\n                  hideRequiredMark={true}\n                  colon={false}>\n                  <FormItem\n                    className=\"text-lg\"\n                    label=\"審核醫師\"\n                    rules={[rules.required]}\n                    initialValue={user.name}\n                    name=\"doctor\">\n                    <DoctorSelect\n                      allowClear\n                      bordered={false}\n                      size=\"large\"\n                      placeholder=\"選擇醫師\"\n                      style={{ width: 160 }}\n                    />\n                  </FormItem>\n                  <FormItem\n                    label=\"申請序號\"\n                    rules={[rules.required]}\n                    name=\"orreqno\">\n                    <Input\n                      size=\"large\"\n                      bordered={false}\n                      placeholder=\"輸入申請序號\"\n                      style={{ width: 230 }}\n                    />\n                  </FormItem>\n                  <FormItem\n                    rules={[rules.required]}\n                    name=\"templateName\"\n                    label=\"報告格式\">\n                    <ReportTemplateSelect\n                      placeholder=\"選擇報告模版\"\n                      size=\"large\"\n                      style={{ width: 230 }}\n                    />\n                  </FormItem>\n                </Form>\n                <div className=\"mt-6\"></div>\n              </div>\n            </Col>\n          </Row>\n        </Page>\n      </Spin>\n    </>\n  )\n}\n"],"sourceRoot":""}