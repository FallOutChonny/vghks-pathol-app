{"version":3,"sources":["../node_modules/@ant-design/icons-svg/es/asn/EyeOutlined.js","../node_modules/@ant-design/icons/es/icons/EyeOutlined.js","containers/report-templates/fake.ts","containers/report-templates/report-template-list.tsx","hooks/useModal.tsx","components/query-table.tsx"],"names":["EyeOutlined","props","ref","React","AntdIcon","Object","assign","icon","EyeOutlinedSvg","displayName","compose","require","mergeAll","map","key","x","Component","path","type","templateById","pathOr","fakeSetting","keys","faker","dataSource","content","Array","from","length","_","idx","id","uuid","name","lorem","word","author","findName","status","statusName","createdAt","moment","createdAtStr","format","updatedAt","updatedAtStr","description","setting","total","ReportTemplateList","useTitle","useBreadcrumb","setBreadcrumbItems","useEffect","onToggle","ownState","useState","editModalVisible","setEditModalVisible","item","setItem","findItem","useCallback","evt","find","currentTarget","dataset","handleModalToggle","prev","useModal","previewModalVisible","handlePreviewModalVisible","handleTo","pathname","history","push","columns","title","dataIndex","render","v","r","onClick","record","replace","routes","align","data-id","className","DeleteOutlined","snippetList","onCancel","span","color","rowKey","QueryTable","pageNum","onChange","loading","rowSelection","pagination","paginationConfig","useMemo","merge","current","pageSize","showSizeChanger"],"mappings":"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","file":"static/js/9.218bd6d9.chunk.js","sourcesContent":["// This icon file is generated automatically.\nvar EyeOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M942.2 486.2C847.4 286.5 704.1 186 512 186c-192.2 0-335.4 100.5-430.2 300.3a60.3 60.3 0 000 51.5C176.6 737.5 319.9 838 512 838c192.2 0 335.4-100.5 430.2-300.3 7.7-16.2 7.7-35 0-51.5zM512 766c-161.3 0-279.4-81.8-362.7-254C232.6 339.8 350.7 258 512 258c161.3 0 279.4 81.8 362.7 254C791.5 684.2 673.4 766 512 766zm-4-430c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176zm0 288c-61.9 0-112-50.1-112-112s50.1-112 112-112 112 50.1 112 112-50.1 112-112 112z\" } }] }, \"name\": \"eye\", \"theme\": \"outlined\" };\nexport default EyeOutlined;\n","// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport EyeOutlinedSvg from \"@ant-design/icons-svg/es/asn/EyeOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar EyeOutlined = function EyeOutlined(props, ref) {\n  return React.createElement(AntdIcon, Object.assign({}, props, {\n    ref: ref,\n    icon: EyeOutlinedSvg\n  }));\n};\n\nEyeOutlined.displayName = 'EyeOutlined';\nexport default React.forwardRef(EyeOutlined);","import { keys, map, pathOr, path, mergeAll } from 'ramda'\nimport fakeSetting from '@/mocks/fake-setting.json'\nimport { templateById } from './template-list'\nconst { compose } = require('ramda')\n\nexport default compose(\n  mergeAll,\n  map((key: string) => ({\n    [key]: compose(\n      map((x: any) => ({\n        ...x,\n        Component: path([x.type, 'Component'])(templateById),\n      })),\n      pathOr([], [key])\n    )(fakeSetting),\n  })),\n  keys\n)(fakeSetting) as { [key: string]: any[] }\n","import React from 'react'\nimport { replace } from 'ramda'\nimport { Row, Col, Tooltip } from 'antd'\nimport moment from 'moment'\nimport { ColumnProps } from 'antd/lib/table'\nimport { EyeOutlined, DeleteOutlined } from '@ant-design/icons'\nimport { Page } from '@/components/layout'\nimport Button from '@/components/button'\nimport Table from '@/components/query-table'\nimport { uuid } from '@/utils/webHelper'\nimport history from '@/utils/history'\nimport useTitle from '@/hooks/useTitle'\nimport useBreadcrumb from '@/hooks/useBreadcrumb'\nimport useModal from '@/hooks/useModal'\nimport * as routes from '@/constants/routes'\nimport { ReportTemplate } from '@/services/reportService'\nimport ReactDndProvider from './react-dnd-provider'\nimport SnippetPreviewModal from './snippet-preview-modal'\nimport fakeSetting from './fake'\n\nconst faker = require('faker')\n\nconst dataSource = {\n  content: Array.from({ length: 100 }).map((_, idx) => ({\n    id: uuid(),\n    name: faker.lorem.word(),\n    author: faker.name.findName(),\n    status: 1,\n    statusName: '已發佈',\n    createdAt: moment(),\n    createdAtStr: moment().format('YYYY/MM/DD HH:mm'),\n    updatedAt: moment(),\n    updatedAtStr: moment().format('YYYY/MM/DD HH:mm'),\n    description: faker.lorem.word(),\n    setting: fakeSetting,\n  })),\n  total: 100,\n}\n\nexport default function ReportTemplateList() {\n  useTitle('結構式報告模版列表')\n\n  const [, setBreadcrumbItems] = useBreadcrumb()\n  React.useEffect(() => {\n    setBreadcrumbItems([{ name: '結構式報告' }, { name: '結構式報告模版列表' }])\n  }, []) // eslint-disable-line\n\n  const [previewModalVisible, handlePreviewModalVisible, { item }] = useModal({\n    content: dataSource.content,\n  })\n\n  const handleTo = (pathname: string) => () => {\n    history.push(pathname)\n  }\n\n  const handleToEditPage = (record: ReportTemplate) => () => {\n    handleTo(replace(':id', `${record.id}`)(routes.REPORT_TEMPLATE_EDIT))()\n  }\n\n  const columns: ColumnProps<ReportTemplate>[] = [\n    {\n      title: '報告名稱',\n      dataIndex: 'name',\n      render: (v, r) => (\n        <Button type=\"link\" onClick={handleToEditPage(r)}>\n          {v}\n        </Button>\n      ),\n    },\n    {\n      title: '創作者',\n      dataIndex: 'author',\n    },\n    {\n      title: '狀態',\n      dataIndex: 'statusName',\n    },\n    {\n      title: '創作時間',\n      dataIndex: 'createdAtStr',\n    },\n    {\n      title: '上次修改時間',\n      dataIndex: 'updatedAtStr',\n    },\n    {\n      title: '報告描述',\n      dataIndex: 'description',\n    },\n    {\n      title: 'actions',\n      dataIndex: 'delete',\n      align: 'center',\n      render: (_, r) => (\n        <>\n          <Tooltip title=\"檢視\">\n            <EyeOutlined\n              data-id={r.id}\n              className=\"c-icon text-lg cursor-pointer mr-3\"\n              onClick={handlePreviewModalVisible}\n            />\n          </Tooltip>\n          <Tooltip title=\"刪除\">\n            <DeleteOutlined\n              data-id={r.id}\n              className=\"c-icon text-lg cursor-pointer\"\n            />\n          </Tooltip>\n        </>\n      ),\n    },\n  ]\n\n  return (\n    <ReactDndProvider className=\"is--preview\">\n      {previewModalVisible && (\n        <SnippetPreviewModal\n          snippetList={item?.setting}\n          onCancel={handlePreviewModalVisible}\n        />\n      )}\n      <Page>\n        <Row className=\"mb-4\">\n          <Col span={24} className=\"flex justify-end\">\n            <Button color=\"outline\">匯入</Button>\n            <Button\n              color=\"outline\"\n              className=\"ml-4\"\n              onClick={handleTo(routes.REPORT_TEMPLATE_CREATE)}>\n              新增\n            </Button>\n          </Col>\n        </Row>\n        <Row>\n          <Col span={24}>\n            <Table rowKey=\"id\" columns={columns} dataSource={dataSource} />\n          </Col>\n        </Row>\n      </Page>\n    </ReactDndProvider>\n  )\n}\n","import React from 'react'\nimport { find, path } from 'ramda'\n\nexport default function useModal<T, TDetail = T>({\n  content,\n  key = 'id',\n  onToggle,\n  ownState,\n}: {\n  content: T[]\n  key?: string\n  ownState?: [T | null, React.Dispatch<React.SetStateAction<T | null>>]\n  onToggle?: (item: T) => any\n}) {\n  const [editModalVisible, setEditModalVisible] = React.useState(false)\n  const [item, setItem] = ownState || React.useState<T | null>(null) // eslint-disable-line\n\n  const findItem = React.useCallback(\n    (evt: React.MouseEvent<HTMLElement>) => {\n      return find(\n        x =>\n          `${path([key], x)}` ===\n          (evt.currentTarget as HTMLElement).dataset['id']\n      )(content)\n    },\n    [content, key]\n  )\n\n  const handleModalToggle = (evt?: React.MouseEvent<HTMLElement>) => {\n    if (!evt) {\n      return\n    }\n\n    const item = findItem(evt)\n\n    if (!item) {\n      setItem(null)\n    }\n\n    if (item) {\n      setItem(item as T)\n    }\n\n    if (onToggle) {\n      onToggle(item as T)\n    }\n  }\n\n  const handleEditModalVisible = (evt?: React.MouseEvent<HTMLElement>) => {\n    setEditModalVisible(prev => !prev)\n    handleModalToggle(evt)\n  }\n\n  return [\n    editModalVisible,\n    handleEditModalVisible,\n    {\n      item,\n      handleModalToggle,\n      setItem,\n    },\n  ] as [\n    boolean,\n    (evt?: React.MouseEvent<HTMLElement, MouseEvent> | undefined) => void,\n    {\n      item: T | null\n      setItem: (value: React.SetStateAction<T | null>) => void\n      handleModalToggle: (\n        evt?: React.MouseEvent<HTMLElement, MouseEvent> | undefined\n      ) => void\n      itemDetail: TDetail\n    }\n  ]\n}\n","import React from 'react'\nimport { ColumnProps, TableProps, TablePaginationConfig } from 'antd/lib/table'\nimport { SpinProps } from 'antd/lib/spin'\nimport { merge } from 'ramda'\nimport { DataSource } from '@/constants/types'\nimport Table from '@/components/table'\n\ntype Props<T> = Omit<TableProps<T>, 'dataSource'> & {\n  columns: ColumnProps<T>[]\n  className?: string\n  pageNum?: number\n  dataSource: DataSource<T>\n  onChange?: (pagination: TablePaginationConfig) => any\n  loading?: boolean | SpinProps\n  rowSelection?: {\n    selectedRowKeys: any[]\n    onChange: (selectedRowKeys: any, selectedRows: any) => void\n  }\n}\n\nexport default function QueryTable<T>({\n  columns,\n  className,\n  pageNum = 1,\n  dataSource,\n  onChange,\n  loading = false,\n  rowSelection,\n  pagination,\n  ...props\n}: Props<T>) {\n  const handleTableChange = ({ current, pageSize }: TablePaginationConfig) => {\n    if (onChange) {\n      onChange({ current, pageSize })\n    }\n  }\n\n  const paginationConfig = React.useMemo(\n    () =>\n      merge<any, any>(pagination, {\n        current: pageNum,\n        pageSize: 10,\n        total: dataSource.total,\n        showSizeChanger: false,\n      }) as TablePaginationConfig,\n    [dataSource.total, pagination, pageNum]\n  )\n\n  return (\n    <Table\n      rowKey=\"id\"\n      dataSource={dataSource.content}\n      columns={columns as any}\n      pagination={paginationConfig}\n      onChange={handleTableChange}\n      rowSelection={rowSelection}\n      loading={loading}\n      className={className}\n      {...props}\n    />\n  )\n}\n"],"sourceRoot":""}