{"version":3,"sources":["components/snippet-preview-modal.tsx","components/query-table.tsx","../node_modules/@ant-design/icons-svg/es/asn/EyeOutlined.js","../node_modules/@ant-design/icons/es/icons/EyeOutlined.js","containers/report-template-list/report-template-list.tsx","hooks/useModal.tsx"],"names":["compose","require","SnippetPreviewModal","onCancel","snippetList","visible","style","top","maskClosable","className","keyboard","width","footer","map","key","gt","__","length","pathOr","renderSnippets","keys","QueryTable","columns","pageNum","dataSource","onChange","loading","rowSelection","pagination","props","paginationConfig","React","useMemo","merge","current","pageSize","total","showSizeChanger","rowKey","content","EyeOutlined","ref","AntdIcon","Object","assign","icon","EyeOutlinedSvg","displayName","ReportTemplateList","useTitle","useBreadcrumb","name","useReportTemplates","onToggle","ownState","useState","editModalVisible","setEditModalVisible","item","setItem","findItem","useCallback","evt","find","x","path","currentTarget","dataset","handleModalToggle","prev","useModal","previewModalVisible","handlePreviewModalVisible","useReportPreview","setIsPreview","handleTo","pathname","history","push","handlePreview","title","dataIndex","render","v","r","type","onClick","record","replace","id","routes","align","_","data-id","DeleteOutlined","setting","minHeight","justify","span","color"],"mappings":"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","file":"static/js/7.682f41b1.chunk.js","sourcesContent":["import React from 'react'\nimport { ModalProps } from 'antd/lib/modal'\nimport { length, __, gt, keys, map, pathOr } from 'ramda'\nimport Modal from '@/components/modal'\nimport { Snippets } from '@/constants/types'\nimport { renderSnippets } from '@/components/snippet-utils'\nconst { compose } = require('ramda')\n\ninterface Props extends ModalProps {\n  snippetList?: Snippets\n}\n\nexport default function SnippetPreviewModal({ onCancel, snippetList }: Props) {\n  return (\n    <Modal\n      visible\n      style={{ top: 30 }}\n      maskClosable={false}\n      className=\"ant-modal-header--border-none\"\n      keyboard={false}\n      width=\"85%\"\n      onCancel={onCancel}\n      footer={false}>\n      {compose(\n        map((key: string) => (\n          <div key={key}>\n            {compose(gt(__, 0), length, pathOr([], [key]))(snippetList) && (\n              <h2 className=\"my-2\">{key}</h2>\n            )}\n            {compose(renderSnippets(), pathOr([], [key]))(snippetList)}\n          </div>\n        )),\n        keys\n      )(snippetList)}\n    </Modal>\n  )\n}\n","import React from 'react'\nimport { ColumnProps, TableProps, TablePaginationConfig } from 'antd/lib/table'\nimport { SpinProps } from 'antd/lib/spin'\nimport { merge } from 'ramda'\nimport { DataSource } from '@/constants/types'\nimport Table from '@/components/table'\n\ntype Props<T> = Omit<TableProps<T>, 'dataSource'> & {\n  columns: ColumnProps<T>[]\n  className?: string\n  pageNum?: number\n  dataSource: DataSource<T>\n  onChange?: (pagination: TablePaginationConfig) => any\n  loading?: boolean | SpinProps\n  rowSelection?: {\n    selectedRowKeys: any[]\n    onChange: (selectedRowKeys: any, selectedRows: any) => void\n  }\n}\n\nexport default function QueryTable<T>({\n  columns,\n  className,\n  pageNum = 1,\n  dataSource,\n  onChange,\n  loading = false,\n  rowSelection,\n  pagination,\n  ...props\n}: Props<T>) {\n  const handleTableChange = ({ current, pageSize }: TablePaginationConfig) => {\n    if (onChange) {\n      onChange({ current, pageSize })\n    }\n  }\n\n  const paginationConfig = React.useMemo(\n    () =>\n      merge<any, any>(pagination, {\n        current: pageNum,\n        pageSize: 10,\n        total: dataSource.total,\n        showSizeChanger: false,\n      }) as TablePaginationConfig,\n    [dataSource.total, pagination, pageNum]\n  )\n\n  return (\n    <Table\n      rowKey=\"id\"\n      dataSource={dataSource.content}\n      columns={columns as any}\n      pagination={paginationConfig}\n      onChange={handleTableChange}\n      rowSelection={rowSelection}\n      loading={loading}\n      className={className}\n      {...props}\n    />\n  )\n}\n","// This icon file is generated automatically.\nvar EyeOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M942.2 486.2C847.4 286.5 704.1 186 512 186c-192.2 0-335.4 100.5-430.2 300.3a60.3 60.3 0 000 51.5C176.6 737.5 319.9 838 512 838c192.2 0 335.4-100.5 430.2-300.3 7.7-16.2 7.7-35 0-51.5zM512 766c-161.3 0-279.4-81.8-362.7-254C232.6 339.8 350.7 258 512 258c161.3 0 279.4 81.8 362.7 254C791.5 684.2 673.4 766 512 766zm-4-430c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176zm0 288c-61.9 0-112-50.1-112-112s50.1-112 112-112 112 50.1 112 112-50.1 112-112 112z\" } }] }, \"name\": \"eye\", \"theme\": \"outlined\" };\nexport default EyeOutlined;\n","// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport EyeOutlinedSvg from \"@ant-design/icons-svg/es/asn/EyeOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar EyeOutlined = function EyeOutlined(props, ref) {\n  return React.createElement(AntdIcon, Object.assign({}, props, {\n    ref: ref,\n    icon: EyeOutlinedSvg\n  }));\n};\n\nEyeOutlined.displayName = 'EyeOutlined';\nexport default React.forwardRef(EyeOutlined);","import React from 'react'\nimport { replace } from 'ramda'\nimport { Row, Col, Tooltip } from 'antd'\nimport { ColumnProps } from 'antd/lib/table'\nimport { EyeOutlined, DeleteOutlined } from '@ant-design/icons'\nimport { Page } from '@/components/layout'\nimport Button from '@/components/button'\nimport Table from '@/components/query-table'\nimport history from '@/utils/history'\nimport useTitle from '@/hooks/useTitle'\nimport { useReportTemplates, useReportPreview } from '@/data/useReportTemplate'\nimport { useBreadcrumb } from '@/hooks/useApp'\nimport useModal from '@/hooks/useModal'\nimport * as routes from '@/constants/routes'\nimport { ReportTemplate } from '@/constants/types'\nimport ReactDndProvider from '@/components/snippet-scrollable-container'\nimport SnippetPreviewModal from '@/components/snippet-preview-modal'\n\nexport default function ReportTemplateList() {\n  useTitle('結構式報告模版列表')\n  useBreadcrumb([{ name: '結構式報告' }, { name: '結構式報告模版列表' }])\n\n  const dataSource = useReportTemplates()\n\n  const [previewModalVisible, handlePreviewModalVisible, { item }] = useModal({\n    content: dataSource.content,\n  })\n\n  const [, setIsPreview] = useReportPreview()\n\n  const handleTo = (pathname: string) => () => {\n    history.push(pathname)\n  }\n\n  const handleToEditPage = (record: ReportTemplate) => () => {\n    handleTo(replace(':id', `${record.id}`)(routes.REPORT_TEMPLATE_EDIT))()\n  }\n\n  const handlePreview = (evt: React.MouseEvent<HTMLElement>) => {\n    setIsPreview()\n    handlePreviewModalVisible(evt)\n  }\n\n  const columns: ColumnProps<ReportTemplate>[] = [\n    {\n      title: '報告名稱',\n      dataIndex: 'name',\n      render: (v, r) => (\n        <Button type=\"link\" onClick={handleToEditPage(r)}>\n          {v}\n        </Button>\n      ),\n    },\n    {\n      title: '創作者',\n      dataIndex: 'author',\n    },\n    {\n      title: '狀態',\n      dataIndex: 'statusName',\n    },\n    {\n      title: '創作時間',\n      dataIndex: 'createdAtStr',\n    },\n    {\n      title: '上次修改時間',\n      dataIndex: 'updatedAtStr',\n    },\n    {\n      title: '報告描述',\n      dataIndex: 'description',\n    },\n    {\n      title: 'actions',\n      dataIndex: 'delete',\n      align: 'center',\n      render: (_, r) => (\n        <>\n          <Tooltip title=\"檢視\">\n            <EyeOutlined\n              data-id={r.id}\n              className=\"c-icon text-lg cursor-pointer mr-3\"\n              onClick={handlePreview}\n            />\n          </Tooltip>\n          <Tooltip title=\"刪除\">\n            <DeleteOutlined\n              data-id={r.id}\n              className=\"c-icon text-lg cursor-pointer\"\n            />\n          </Tooltip>\n        </>\n      ),\n    },\n  ]\n\n  return (\n    <ReactDndProvider className=\"is--preview\">\n      {previewModalVisible && (\n        <SnippetPreviewModal\n          snippetList={item?.setting}\n          onCancel={handlePreview}\n        />\n      )}\n      <Page style={{ minHeight: 'calc(100vh - 203px)' }}>\n        <Row className=\"mb-4\" justify=\"center\">\n          <Col span={20} className=\"flex justify-end\">\n            <Button color=\"outline\">匯入</Button>\n            <Button\n              color=\"outline\"\n              className=\"ml-4\"\n              onClick={handleTo(routes.REPORT_TEMPLATE_CREATE)}>\n              新增\n            </Button>\n          </Col>\n        </Row>\n        <Row justify=\"center\">\n          <Col span={20}>\n            <Table rowKey=\"id\" columns={columns} dataSource={dataSource} />\n          </Col>\n        </Row>\n      </Page>\n    </ReactDndProvider>\n  )\n}\n","import React from 'react'\nimport { find, path } from 'ramda'\n\nexport default function useModal<T, TDetail = T>({\n  content,\n  key = 'id',\n  onToggle,\n  ownState,\n}: {\n  content: T[]\n  key?: string\n  ownState?: [T | null, React.Dispatch<React.SetStateAction<T | null>>]\n  onToggle?: (item: T) => any\n}) {\n  const [editModalVisible, setEditModalVisible] = React.useState(false)\n  const [item, setItem] = ownState || React.useState<T | null>(null) // eslint-disable-line\n\n  const findItem = React.useCallback(\n    (evt: React.MouseEvent<HTMLElement>) => {\n      return find(\n        x =>\n          `${path([key], x)}` ===\n          (evt.currentTarget as HTMLElement).dataset['id']\n      )(content)\n    },\n    [content, key]\n  )\n\n  const handleModalToggle = (evt?: React.MouseEvent<HTMLElement>) => {\n    if (!evt) {\n      return\n    }\n\n    const item = findItem(evt)\n\n    if (!item) {\n      setItem(null)\n    }\n\n    if (item) {\n      setItem(item as T)\n    }\n\n    if (onToggle) {\n      onToggle(item as T)\n    }\n  }\n\n  const handleEditModalVisible = (evt?: React.MouseEvent<HTMLElement>) => {\n    setEditModalVisible(prev => !prev)\n    handleModalToggle(evt)\n  }\n\n  return [\n    editModalVisible,\n    handleEditModalVisible,\n    {\n      item,\n      handleModalToggle,\n      setItem,\n    },\n  ] as [\n    boolean,\n    (evt?: React.MouseEvent<HTMLElement, MouseEvent> | undefined) => void,\n    {\n      item: T | null\n      setItem: (value: React.SetStateAction<T | null>) => void\n      handleModalToggle: (\n        evt?: React.MouseEvent<HTMLElement, MouseEvent> | undefined\n      ) => void\n      itemDetail: TDetail\n    }\n  ]\n}\n"],"sourceRoot":""}