{"version":3,"sources":["components/snippet-drag-preview.js","components/snippet-drag-layer.tsx","hooks/useConfirm.tsx","../node_modules/@ant-design/icons-svg/es/asn/MinusOutlined.js","../node_modules/@ant-design/icons/es/icons/MinusOutlined.js","containers/phrase-list/phrase-edit.tsx"],"names":["SnippetDragPreview","React","Component","layerStyles","position","pointerEvents","zIndex","left","top","width","height","getItemStyles","props","initialOffset","currentOffset","display","x","y","transform","WebkitTransform","DragLayer","monitor","item","getItem","itemType","getItemType","getInitialSourceClientOffset","getSourceClientOffset","isDragging","element","document","elementFromPoint","canDrop","canMoveSnippet","className","style","ItemTypes","BOARD","SNIPPET","renderItem","modal","compose","require","confirm","Modal","useConfirm","content","dataSource","onOk","onBeforeOpen","refetchQueries","onCancel","modalProps","onCompleted","onCompletedResolve","useRef","handleConfirm","evt","_item","pathOr","find","path","currentTarget","dataset","modalDefaultProps","okText","update","okButtonProps","minWidth","marginRight","loading","Promise","resolve","current","MinusOutlined","ref","AntdIcon","Object","assign","icon","MinusOutlinedSvg","displayName","PhraseEdit","useTitle","useBreadcrumb","name","params","match","useReportPreview","isPreview","handlePreview","usePhraseItem","id","phraseTemplate","snippetList","handleSnippetUpdate","useEffect","form","setFieldsValue","JSON","stringify","useForm","useCreateOrUpdatePhrase","response","history","push","replace","data","PHRASE_EDIT","success","creating","handleAdd","destroy","onError","handlePublicFailure","updating","handleUpdate","status","reportTemplateStatusEnums","FINISH","handlePublic","useRouteLeaveConfirm","PHRASE_LIST","handleExport","useExportTemplate","filename","setting","useHeaderContent","color","onClick","validateFields","then","values","map","spinning","initialValues","gutter","span","defaultActiveKey","expandIconPosition","expandIcon","isActive","Panel","header","key","Item","noStyle","rules","required","draggable","onSnippetUpdate"],"mappings":"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","file":"static/js/10.d90a172c.chunk.js","sourcesContent":["import React from 'react'\n// import { envStore } from '@/constants/env'\n\nexport default class SnippetDragPreview extends React.Component {\n  render() {\n    // const dropType = this.props.canDrop ? 'allow' : 'forbid'\n    // const url = `${envStore.publicUrl}/images/icon-drag-${dropType}-drop@2x.png`\n\n    return <div>{/* <img width={160} src={url} alt={url} /> */}</div>\n  }\n}\n","import React from 'react'\nimport { XYCoord, DragLayer } from 'react-dnd'\nimport { Identifier } from 'dnd-core'\nimport ItemTypes from '@/constants/item-types'\nimport SnippetDragPreview from '@/components/snippet-drag-preview'\nimport { canMoveSnippet } from './snippet-utils'\n\nconst layerStyles: React.CSSProperties = {\n  position: 'fixed',\n  pointerEvents: 'none',\n  zIndex: 100,\n  left: 0,\n  top: 0,\n  width: '100%',\n  height: '100%',\n}\n\ninterface DragLayerProps {\n  item?: any\n  itemType?: Identifier | null\n  initialOffset?: XYCoord | null\n  currentOffset?: XYCoord | null\n  isDragging?: boolean\n}\n\nfunction getItemStyles(props: DragLayerProps) {\n  const { initialOffset, currentOffset } = props\n\n  if (!initialOffset || !currentOffset) {\n    return {\n      display: 'none',\n    }\n  }\n\n  const { x, y } = currentOffset\n\n  const transform = `translate(${x}px, ${y}px)`\n  return {\n    transform,\n    WebkitTransform: transform,\n  }\n}\n\nconst SnippetDragLayer: React.FC<DragLayerProps> = props => {\n  const { itemType, isDragging, currentOffset } = props\n\n  function renderItem({ canDrop }: { canDrop: boolean }) {\n    switch (itemType) {\n      case ItemTypes.BOARD:\n      case ItemTypes.SNIPPET:\n        return <SnippetDragPreview canDrop={canDrop} />\n      default:\n        return null\n    }\n  }\n\n  if (!isDragging) {\n    return null\n  }\n\n  if (!currentOffset) {\n    return null\n  }\n\n  const element = document.elementFromPoint(currentOffset.x, currentOffset.y)\n\n  let canDrop = false\n  if (element) {\n    canDrop = canMoveSnippet(element)\n  }\n\n  return (\n    <div className=\"report-template-builder__drag-layer\" style={layerStyles}>\n      <div style={getItemStyles(props)}>{renderItem({ canDrop })}</div>\n    </div>\n  )\n}\n\nexport default DragLayer(monitor => ({\n  item: monitor.getItem(),\n  itemType: monitor.getItemType(),\n  initialOffset: monitor.getInitialSourceClientOffset(),\n  currentOffset: monitor.getSourceClientOffset(),\n  isDragging: monitor.isDragging(),\n}))(SnippetDragLayer)\n","import React from 'react'\nimport { ModalProps, ModalFuncProps } from 'antd/lib/modal'\nimport { find, path, pathOr } from 'ramda'\nimport Modal from '@/components/modal'\nimport { modalDefaultProps } from '@/utils/message'\nconst { compose } = require('ramda')\n\nexport const confirm = Modal.confirm\n\ntype Props<T> = {\n  /**\n   * 確認視窗的文字內容\n   */\n  content?: string | React.ReactNode\n  /**\n   * 確認後執行的行為，例如打 API\n   */\n  onOk?: (values?: any, resolve?: (values?: any) => any) => any\n  /**\n   * 跳出確認時可以做的事情，例如關掉正在編輯的對話框\n   */\n  onBeforeOpen?: () => any\n  /**\n   * 成功後，可重新取得(列表)資料\n   */\n  refetchQueries?: () => any\n  /**\n   * 取消後做的事情，例如重新打開編輯對話窗\n   */\n  onCancel?: () => any\n  /**\n   * 列表資料，可在跳確認窗時從裡面查找要確認修改的資料並回傳\n   */\n  dataSource?: T[]\n  /**\n   * 項目，可以是單一物件或陣列物件...\n   */\n  item?: any\n  /**\n   * 自訂確認視窗屬性\n   */\n  modalProps?: ModalProps\n  /**\n   * 成功後可作的事情\n   */\n  onCompleted?: () => any\n}\n\nexport let modal: {\n  destroy: () => void\n  update: (newConfig: ModalFuncProps) => void\n}\n\nexport function useConfirm<T extends any>(props: Props<T>) {\n  const {\n    content,\n    dataSource = [],\n    onOk,\n    onBeforeOpen,\n    refetchQueries,\n    onCancel,\n    item,\n    modalProps = {},\n    onCompleted,\n  } = props\n\n  let onCompletedResolve = React.useRef(() => ({}))\n\n  const handleToggleConfirm = (evt: React.MouseEvent<HTMLElement>) => {\n    if (onBeforeOpen) {\n      onBeforeOpen()\n    }\n    handleConfirm(evt)\n  }\n\n  const handleFailure = () => {\n    if (modal) {\n      modal.update({\n        okButtonProps: {\n          className: 'c-btn c-btn--danger',\n          style: { minWidth: 96, marginRight: 16 },\n          loading: false,\n        },\n      })\n    }\n  }\n\n  const handleConfirm = (evt: React.MouseEvent<HTMLElement>) => {\n    const _item = compose(\n      pathOr(item, []),\n      find<any>(\n        x =>\n          `${path(['id'], x)}` ===\n          (evt.currentTarget as HTMLElement).dataset['id']\n      )\n    )(dataSource)\n\n    modal = confirm({\n      ...modalDefaultProps(content, modalProps),\n      okText: '確認',\n      onOk() {\n        if (modal) {\n          modal.update({\n            okButtonProps: {\n              className: 'c-btn c-btn--danger',\n              style: { minWidth: 80, marginRight: 24 },\n              loading: true,\n            },\n          })\n        }\n\n        return new Promise(resolve => {\n          if (onOk) {\n            onOk(_item)\n          }\n\n          if (onCompleted) {\n            onCompleted()\n          }\n\n          onCompletedResolve.current = (() => {\n            resolve()\n            if (refetchQueries) {\n              refetchQueries()\n            }\n          }) as any\n        })\n      },\n      onCancel() {\n        if (onCancel) {\n          onCancel()\n        }\n      },\n    })\n  }\n\n  return [handleToggleConfirm, handleFailure] as [\n    (evt: React.MouseEvent<HTMLElement>) => void,\n    () => void\n  ]\n}\n\nexport default useConfirm\n","// This icon file is generated automatically.\nvar MinusOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M872 474H152c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h720c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8z\" } }] }, \"name\": \"minus\", \"theme\": \"outlined\" };\nexport default MinusOutlined;\n","// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport MinusOutlinedSvg from \"@ant-design/icons-svg/es/asn/MinusOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar MinusOutlined = function MinusOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, Object.assign({}, props, {\n    ref: ref,\n    icon: MinusOutlinedSvg\n  }));\n};\n\nMinusOutlined.displayName = 'MinusOutlined';\nexport default /*#__PURE__*/React.forwardRef(MinusOutlined);","import React from 'react'\nimport { Row, Col, message, Form, Spin } from 'antd'\nimport { PlusOutlined, MinusOutlined } from '@ant-design/icons'\nimport { replace, map } from 'ramda'\nimport { RouteComponentProps } from 'react-router-dom'\nimport useRouteLeaveConfirm from '@/hooks/useRouteLeaveConfirm'\nimport useTitle from '@/hooks/useTitle'\nimport useConfirm, { modal } from '@/hooks/useConfirm'\nimport { useBreadcrumb, useHeaderContent } from '@/hooks/useApp'\nimport { Page } from '@/components/layout'\nimport Button from '@/components/button'\nimport Input from '@/components/input'\nimport ReactDndProvider from '@/components/snippet-scrollable-container'\nimport SnippetListMenu from '@/components/snippet-list-menu'\nimport SnippetDragLayer from '@/components/snippet-drag-layer'\nimport SnippetsContainer from '@/components/snippets-container'\nimport Collapse from '@/components/collapse'\nimport { usePhraseItem, useCreateOrUpdatePhrase } from '@/services/phrase'\nimport { useReportPreview, useExportTemplate } from '@/services/report-template'\nimport history from '@/utils/history'\nimport { rules } from '@/utils/form'\nimport { PHRASE_EDIT, PHRASE_LIST } from '@/constants/routes'\nimport { reportTemplateStatusEnums } from '@/constants/enums'\nconst { compose } = require('ramda')\n\ninterface Props extends RouteComponentProps<{ id: string }> {}\n\nexport default function PhraseEdit(props: Props) {\n  useTitle('結構式報告模版')\n\n  useBreadcrumb([{ name: '報告模版' }, { name: '片語模版' }])\n\n  const { params } = props.match\n\n  const [isPreview, handlePreview] = useReportPreview()\n\n  const {\n    loading,\n    phraseTemplate,\n    snippetList,\n    handleSnippetUpdate,\n  } = usePhraseItem({\n    id: params.id,\n  })\n\n  // reset form field values while report data changed\n  React.useEffect(() => {\n    if (phraseTemplate) {\n      form.setFieldsValue(phraseTemplate)\n    }\n  }, [JSON.stringify(phraseTemplate)]) // eslint-disable-line\n\n  const [form] = Form.useForm()\n\n  const [creating, handleAdd] = useCreateOrUpdatePhrase({\n    onCompleted: response => {\n      history.push(replace(':id', response?.data.name)(PHRASE_EDIT))\n      message.success('片語模版已建立成功')\n    },\n  })\n\n  const [updating, handleUpdate] = useCreateOrUpdatePhrase({\n    onCompleted: response => {\n      message.success('片語模版已儲存成功')\n      history.push(replace(':id', response?.data.name)(PHRASE_EDIT))\n\n      if (modal) {\n        modal.destroy()\n      }\n    },\n    onError: () => {\n      if (modal) {\n        handlePublicFailure()\n      }\n    },\n  })\n\n  const handleSave = () => {\n    form.validateFields().then(values => {\n      let handler = phraseTemplate?.id ? handleUpdate : handleAdd\n\n      handler({\n        ...phraseTemplate,\n        ...values,\n        setting: compose(\n          map(({ Component, icon, ...x }) => ({\n            ...x,\n          }))\n        )(snippetList),\n      })\n    })\n  }\n\n  const [handlePublic, handlePublicFailure] = useConfirm({\n    content: `發佈後片語模版將可以在報告中使用，確認要發佈嗎？`,\n    onOk: () =>\n      handleUpdate({\n        id: phraseTemplate.id,\n        status: reportTemplateStatusEnums.FINISH,\n      }),\n  })\n\n  const handleConfirm = useRouteLeaveConfirm(PHRASE_LIST)\n\n  const handleExport = useExportTemplate({\n    filename: '片語模版',\n    data: { ...phraseTemplate, setting: snippetList as any },\n  })\n\n  useHeaderContent(\n    <div className=\"inline-flex\">\n      <Button\n        color=\"outline\"\n        className=\"ml-6 bg-transparent text-white border-white\"\n        onClick={handlePublic}>\n        發佈\n      </Button>\n      <Button\n        color=\"outline\"\n        className=\"ml-6 bg-transparent text-white border-white\"\n        onClick={handleSave}>\n        儲存\n      </Button>\n      <Button\n        color=\"outline\"\n        className=\"ml-6 bg-transparent text-white border-white\"\n        onClick={handleConfirm}>\n        取消\n      </Button>\n      <Button\n        color=\"outline\"\n        className=\"ml-6 bg-transparent text-white border-white\"\n        onClick={handleExport}>\n        匯出\n      </Button>\n      <Button\n        color=\"outline\"\n        className=\"ml-6 bg-transparent text-white border-white\"\n        onClick={handlePreview}>\n        預覽\n      </Button>\n    </div>\n  )\n\n  return (\n    <ReactDndProvider>\n      <SnippetDragLayer />\n      <Spin spinning={loading || creating || updating}>\n        <Page className=\"pr-12\">\n          <Form form={form} initialValues={{ ...phraseTemplate }}>\n            <Row gutter={48} className=\"pt-2 relative\">\n              <Col span={5}>\n                <Collapse\n                  defaultActiveKey={[1, 2]}\n                  expandIconPosition=\"right\"\n                  className=\"shadow-2xl header-pl-clear\"\n                  expandIcon={({ isActive }) =>\n                    isActive ? <MinusOutlined /> : <PlusOutlined />\n                  }>\n                  <Collapse.Panel header=\"片語模版\" key={1}>\n                    <Row className=\"mb-2 text-sm text-darkGrey\">\n                      <Col span={24} className=\"mb-3\">\n                        <div className=\"inline-block\" css={{ width: 60 }}>\n                          名稱:\n                        </div>\n                        <Form.Item noStyle name=\"name\" rules={[rules.required]}>\n                          <Input className=\"w-2/3\" />\n                        </Form.Item>\n                      </Col>\n                      <Col span={24} className=\"my-3\">\n                        <div className=\"inline-block\" css={{ width: 60 }}>\n                          描述:\n                        </div>\n                        <Form.Item noStyle name=\"description\">\n                          <Input className=\"w-2/3\" />\n                        </Form.Item>\n                      </Col>\n                      <Col span={24} className=\"my-3\">\n                        <div className=\"inline-block\" css={{ width: 60 }}>\n                          創作者:\n                        </div>\n                        <Form.Item\n                          noStyle\n                          name=\"author\"\n                          rules={[rules.required]}>\n                          <Input className=\"w-2/3\" />\n                        </Form.Item>\n                      </Col>\n                    </Row>\n                  </Collapse.Panel>\n                  <Collapse.Panel header=\"工具列\" key={2}>\n                    <Row>\n                      <Col span={24}>\n                        <SnippetListMenu />\n                      </Col>\n                    </Row>\n                  </Collapse.Panel>\n                </Collapse>\n              </Col>\n\n              <Col\n                span={19}\n                className=\"report-template-builder__main-content rounded-tl-lg\">\n                <SnippetsContainer\n                  draggable={!isPreview}\n                  snippetList={snippetList}\n                  onSnippetUpdate={handleSnippetUpdate}\n                />\n              </Col>\n            </Row>\n          </Form>\n        </Page>\n      </Spin>\n    </ReactDndProvider>\n  )\n}\n"],"sourceRoot":""}